// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
Array [
  "globals.globals=globals
globals.w=\\"||¯|| \\"
globals.v=\\"||_|| \\"
globals.s=\\"|| || \\"
globals.q=\\"||¯ \\"
globals.u=\\"||  \\"
globals.r=\\"||_ \\"
globals.x=\\"||¯\\\\\\\\ \\"
globals.t=\\"|| \\"
globals.y=\\"  \\"
globals.z=\\"<color=#\\"
globals.AB=\\">\\"
globals._A=\\"</color>\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end function
MAIN()",
]
`;

exports[`parse default scripts ascii.src uglify 1`] = `
Array [
  "globals.globals=globals
globals.w=\\"||¯|| \\"
globals.v=\\"||_|| \\"
globals.s=\\"|| || \\"
globals.q=\\"||¯ \\"
globals.u=\\"||  \\"
globals.r=\\"||_ \\"
globals.x=\\"||¯\\\\\\\\ \\"
globals.t=\\"|| \\"
globals.y=\\"  \\"
globals.z=\\"<color=#\\"
globals.AB=\\">\\"
globals._A=\\"</color>\\"
C={}
D={}
E=function(a)
if not C.hasIndex(a) then
exit(((\\"Module \\" + a) + \\" cannot be found...\\"))
end if
G=C[a]
return @G(a).exports
end function
F=function()
H={}
I={}
I.a=[w,v,s]
I.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
I.c=[q,u,r]
I.d=[x,\\"|| // \\",\\"||//  \\"]
I.e=[q,\\"||- \\",r]
I.f=[q,r,u]
I.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",v]
I.h=[s,\\"||-|| \\",s]
I.i=[t,t,t]
I.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
I.k=[\\"||  / \\",\\"|| /  \\",x]
I.l=[u,u,r]
I.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
I.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
I.o=[w,s,v]
I.p=[w,v,\\"||    \\"]
I.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
I.r=[w,x,s]
I.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
I.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
I.u=[s,s,v]
I.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
I.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
I.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
I.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
I.z=[\\"¯// \\",\\"//  \\",r]
I[\\"0\\"]=[w,\\"||x|| \\",v]
I[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
I[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
I[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
I[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
I[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
I[\\"6\\"]=[\\"||¯¯  \\",w,v]
I[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
I[\\"8\\"]=[w,\\"||-|| \\",v]
I[\\"9\\"]=[w,\\"  ¯|| \\",\\"  //  \\"]
I[\\" \\"]=[y,y,y]
H.MAP=I
H.gen=function(str,l)
a=[[],[],[]]
m=self.MAP
for char in str
char=char.lower
if m.hasIndex(char) then
a[0].push(m[char][0])
a[1].push(m[char][1])
a[2].push(m[char][2])
end if
end for
if (typeof(l) == \\"string\\") then
a[0]=(([((z + l) + AB)] + a[0]) + [_A])
a[1]=(([((z + l) + AB)] + a[1]) + [_A])
a[2]=(([((z + l) + AB)] + a[2]) + [_A])
else if (typeof(l) == \\"list\\") then
a[0]=(([((z + l[0]) + AB)] + a[0]) + [_A])
a[1]=(([((z + l[1]) + AB)] + a[1]) + [_A])
a[2]=(([((z + l[2]) + AB)] + a[2]) + [_A])
end if
return [a[0].join(\\"\\"),a[1].join(\\"\\"),a[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(H.gen(\\"Hallo\\"))
end function
F",
]
`;

exports[`parse default scripts binary-expressions.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
a=(a / b)
a=(a * b)
a=(a - b)
a=(a + b)
(bitwise(\\"<<\\",a,b))
(bitwise(\\">>\\",a,b))
w=(bitwise(\\">>\\",(bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c)))),a))
(bitwise(\\"|\\",a,b))
(bitwise(\\"&\\",a,b))
(bitwise(\\"^\\",a,b))
(a and b)
(a or b)
end function
MAIN()",
]
`;

exports[`parse default scripts binary-expressions.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H=(H / I)
H=(H * I)
H=(H - I)
H=(H + I)
(bitwise(\\"<<\\",H,I))
(bitwise(\\">>\\",H,I))
J=(bitwise(\\">>\\",(bitwise(\\">>>\\",H,(bitwise(\\"<<\\",I,K)))),H))
(bitwise(\\"|\\",H,I))
(bitwise(\\"&\\",H,I))
(bitwise(\\"^\\",H,I))
(H and I)
(H or I)
end function
F",
]
`;

exports[`parse default scripts greybel-utils.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MODULES[\\"B\\"]=function(r)
module={}
if EXPORTED.hasIndex(r) then
module=EXPORTED[r]
end if
if not module.hasIndex(\\"exports\\") then
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end if
EXPORTED[r]=module
return EXPORTED[r]
end function
MAIN=function()
foo = __REQUIRE(\\"B\\")
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
null
//debugger
end function
MAIN()",
]
`;

exports[`parse default scripts greybel-utils.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
C[\\"B\\"]=function(r)
G={}
if D.hasIndex(r) then
G=D[r]
end if
if not G.hasIndex(\\"exports\\") then
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end if
D[r]=G
return D[r]
end function
F=function()
H=E(\\"B\\")
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
null
//debugger
end function
F",
]
`;

exports[`parse default scripts import-code.src 1`] = `
Array [
  "globals.globals=globals
globals.w=\\"||¯|| \\"
globals.v=\\"||_|| \\"
globals.s=\\"|| || \\"
globals.q=\\"||¯ \\"
globals.u=\\"||  \\"
globals.r=\\"||_ \\"
globals.x=\\"||¯\\\\\\\\ \\"
globals.t=\\"|| \\"
globals.y=\\"  \\"
globals.z=\\"<color=#\\"
globals.AB=\\">\\"
globals._A=\\"</color>\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
import_code(\\"/some/path\\")
print(123)
end function
MAIN()",
  "AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts import-code.src uglify 1`] = `
Array [
  "globals.globals=globals
globals.w=\\"||¯|| \\"
globals.v=\\"||_|| \\"
globals.s=\\"|| || \\"
globals.q=\\"||¯ \\"
globals.u=\\"||  \\"
globals.r=\\"||_ \\"
globals.x=\\"||¯\\\\\\\\ \\"
globals.t=\\"|| \\"
globals.y=\\"  \\"
globals.z=\\"<color=#\\"
globals.AB=\\">\\"
globals._A=\\"</color>\\"
C={}
D={}
E=function(a)
if not C.hasIndex(a) then
exit(((\\"Module \\" + a) + \\" cannot be found...\\"))
end if
G=C[a]
return @G(a).exports
end function
F=function()
import_code(\\"/some/path\\")
print(123)
end function
F",
  "H={}
I={}
I.a=[w,v,s]
I.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
I.c=[q,u,r]
I.d=[x,\\"|| // \\",\\"||//  \\"]
I.e=[q,\\"||- \\",r]
I.f=[q,r,u]
I.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",v]
I.h=[s,\\"||-|| \\",s]
I.i=[t,t,t]
I.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
I.k=[\\"||  / \\",\\"|| /  \\",x]
I.l=[u,u,r]
I.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
I.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
I.o=[w,s,v]
I.p=[w,v,\\"||    \\"]
I.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
I.r=[w,x,s]
I.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
I.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
I.u=[s,s,v]
I.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
I.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
I.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
I.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
I.z=[\\"¯// \\",\\"//  \\",r]
I[\\"0\\"]=[w,\\"||x|| \\",v]
I[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
I[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
I[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
I[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
I[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
I[\\"6\\"]=[\\"||¯¯  \\",w,v]
I[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
I[\\"8\\"]=[w,\\"||-|| \\",v]
I[\\"9\\"]=[w,\\"  ¯|| \\",\\"  //  \\"]
I[\\" \\"]=[y,y,y]
H.MAP=I
H.gen=function(str,l)
a=[[],[],[]]
m=self.MAP
for char in str
char=char.lower
if m.hasIndex(char) then
a[0].push(m[char][0])
a[1].push(m[char][1])
a[2].push(m[char][2])
end if
end for
if (typeof(l) == \\"string\\") then
a[0]=(([((z + l) + AB)] + a[0]) + [_A])
a[1]=(([((z + l) + AB)] + a[1]) + [_A])
a[2]=(([((z + l) + AB)] + a[2]) + [_A])
else if (typeof(l) == \\"list\\") then
a[0]=(([((z + l[0]) + AB)] + a[0]) + [_A])
a[1]=(([((z + l[1]) + AB)] + a[1]) + [_A])
a[2]=(([((z + l[2]) + AB)] + a[2]) + [_A])
end if
return [a[0].join(\\"\\"),a[1].join(\\"\\"),a[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(H.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts negation.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=(((-1 + 2) + -2) + +3)
foo=[-1,(-2 + 4),((-2 + -4) + +6)]
print(test)
print(foo)
end function
MAIN()",
]
`;

exports[`parse default scripts negation.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H=(((-1 + 2) + -2) + +3)
I=[-1,(-2 + 4),((-2 + -4) + +6)]
print(H)
print(I)
end function
F",
]
`;

exports[`parse default scripts obj-init.src 1`] = `
Array [
  "globals.globals=globals
globals.O=\\"123\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
valueOfIdentifier=\\"foo\\"
myObject={\\"test\\":{\\"another\\":\\"123\\"},\\"value\\":\\"123\\",\\"idtf\\":valueOfIdentifier}
print([myObject.test.another,myObject.value,myObject.idtf])
myList=[{\\"another\\":\\"123\\"},\\"123\\",valueOfIdentifier]
print(myList)
end function
MAIN()",
]
`;

exports[`parse default scripts obj-init.src uglify 1`] = `
Array [
  "globals.globals=globals
globals.O=\\"123\\"
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H=\\"foo\\"
I={\\"test\\":{\\"another\\":O},\\"value\\":O,\\"idtf\\":H}
print([I.test.another,I.value,I.idtf])
N=[{\\"another\\":O},O,H]
print(N)
end function
F",
]
`;

exports[`parse default scripts optimize.src 1`] = `
Array [
  "globals.globals=globals
globals.N=\\"xxxxxxxxxx\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=function(abc)
print(abc)
end function
superlangername=function(abc)
print(abc)
end function
superlangername3=function(abc)
print(abc)
end function
superlangername4=function(abc)
print(abc)
end function
superlangername5=function(abc)
print(abc)
end function
test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")
end function
MAIN()",
]
`;

exports[`parse default scripts optimize.src uglify 1`] = `
Array [
  "globals.globals=globals
globals.N=\\"xxxxxxxxxx\\"
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H=function(I)
print(I)
end function
J=function(I)
print(I)
end function
K=function(I)
print(I)
end function
L=function(I)
print(I)
end function
M=function(I)
print(I)
end function
H(N)
J(N)
L(N)
J(N)
M(N)
K(N)
end function
F",
]
`;

exports[`parse default scripts password-generator.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=((PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper) + PasswordGenerator.NUMBER_CHARACTERS)
PasswordGenerator.constructor=function()
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function(i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i == null) then i=(currentCharBuffer.len - 1)
p=currentCharBuffer[i]
p=(p + 1)
currentCharBuffer[i]=p
if (p == maxBufferSize) then
currentCharBuffer[i]=0
if (i == 0) then
currentCharBuffer.push(0)
else
me.increaseBuffer((i - 1))
end if
end if
end function
PasswordGenerator.gen=function()
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while (index < currentCharBuffer.len)
pointer=currentCharBuffer[index]
password=(password + generatorCharacters[pointer])
if (index == (currentCharBuffer.len - 1)) then self.increaseBuffer()
index=(index + 1)
end while
if (currentCharBuffer.len > me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor()
index=0
max=10
result=[]
while (index < max)
result.push(pgen.gen())
index=(index + 1)
end while
print(result)
end function
MAIN()",
]
`;

exports[`parse default scripts password-generator.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H={}
H.MAX_PASSWORD_LENGTH=15
H.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
H.NUMBER_CHARACTERS=\\"0123456789\\"
H.ALPHA_NUMERIC=((H.ALPHABETIC_CHARACTERS + H.ALPHABETIC_CHARACTERS.upper) + H.NUMBER_CHARACTERS)
H.constructor=function()
O=self
O.buffer=[0]
O.characters=O.ALPHA_NUMERIC
return O
end function
H.increaseBuffer=function(S)
O=self
T=O.buffer
U=O.characters.len
if (S == null) then S=(T.len - 1)
W=T[S]
W=(W + 1)
T[S]=W
if (W == U) then
T[S]=0
if (S == 0) then
T.push(0)
else
O.increaseBuffer((S - 1))
end if
end if
end function
H.gen=function()
O=self
T=O.buffer
Z=O.characters
a=\\"\\"
b=0
while (b < T.len)
c=T[b]
a=(a + Z[c])
if (b == (T.len - 1)) then self.increaseBuffer
b=(b + 1)
end while
if (T.len > O.MAX_PASSWORD_LENGTH) then
return null
end if
return a
end function
d=(new H).constructor
b=0
e=10
f=[]
while (b < e)
f.push(d.gen)
b=(b + 1)
end while
print(f)
end function
F",
]
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
Array [
  "globals.globals=globals
globals.Ac=1
globals.Aa=null
globals.Ab=63
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
String={}
String.constructor=function(str)
self.str=str
return self
end function
String.parse=function(values)
result=self.str
index=0
maxIndex=values.len
while (index < maxIndex)
result=result.replace((\\"$\\" + index),values[index])
index=(index + 1)
end while
return (new self).constructor(result)
end function
String.startsWith=function(str)
return (self.str.indexOf(str) == 0)
end function
String.substr=function(startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function(str)
return self.str.indexOf(str)
end function
String.replace=function(str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function()
return self.str
end function
String.length=function()
return self.str.len
end function
String.split=function(seperator)
return self.str.split(seperator)
end function
String.trim=function(seperator)
return (new self).constructor(self.str.trim())
end function
Error={}
Error.String=String
Error.constructor=function(message,values)
m=self
m.message=message
if (values != null) then
m.message=(new m.String).constructor(message).parse(values).toString()
end if
return m
end function
Error.throw=function()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret=\\"test123\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function(defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn == null) then me.hashFn=@md5
if (charset == null) then me.table=me.defaultCharset
if (me.table.len != 64) then (new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw()
return me
end function
Crypto.getHash=function(pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function(str,pw)
me=self
if (pw == null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=(str.len % 3)
max=(str.len - padding)
get=function(v)
if not me.table.hasIndex(v) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw()
end if
return me.table[v]
end function
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function(a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),16)
b=LSHIFT((str[(position + 1)].code + m),8)
c=(str[(position + 2)].code + m)
buffer=((a + b) + c)
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=(position + 3)
end while
if (padding == 2) then
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),8)
b=(str[(position + 1)].code + m)
buffer=(a + b)
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding == 1) then
m=hash[((position % hash.len) - 1)]
buffer=(str[position].code + m)
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function(str,pw)
me=self
if (pw == null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=(bitCounter + 1)
if (currentBit % 4) then
bitStorage=((bitStorage * 64) + buffer)
else
bitStorage=buffer
end if
if (currentBit % 4) then
expectedHashIndex=(((floor((hashPointer / 3)) * 3) % hashLength) - 1)
if not hash.hasIndex(expectedHashIndex) then break
m=hash[expectedHashIndex]
operation=AND((-2 * bitCounter),6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation != 0) then
charCode=(operation - m)
if (charCode > me.maxCharCode) then break
output.push(char(charCode))
end if
hashPointer=(hashPointer + 1)
end if
position=(position + 1)
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
pwd=\\"abcde\\"
foo=test.encrypt(pwd)
decrypted=test.decrypt(foo)
print(foo)
print(decrypted)
end function
MAIN()",
]
`;

exports[`parse default scripts pseudo-crypto.src uglify 1`] = `
Array [
  "globals.globals=globals
globals.Ac=1
globals.Aa=null
globals.Ab=63
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H={}
H.constructor=function(str)
self.str=str
return self
end function
H.parse=function(K)
L=self.str
M=0
N=K.len
while (M < N)
L=L.replace((\\"$\\" + M),K[M])
M=(M + Ac)
end while
return (new self).constructor(L)
end function
H.startsWith=function(str)
return (self.str.indexOf(str) == 0)
end function
H.substr=function(T,U)
return (new self).constructor(slice(self.str,T,U))
end function
H.indexOf=function(str)
return self.str.indexOf(str)
end function
H.replace=function(str,V)
return (new self).constructor(self.str.replace(str,V))
end function
H.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
H.toString=function()
return self.str
end function
H.length=function()
return self.str.len
end function
H.split=function(AF)
return self.str.split(AF)
end function
H.trim=function(AF)
return (new self).constructor(self.str.trim)
end function
AL={}
AL.String=H
AL.constructor=function(d,K)
e=self
e.message=d
if (K != Aa) then
e.message=(new e.String).constructor(d).parse(K).toString
end if
return e
end function
AL.throw=function()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
g={}
g.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
g.defaultSecret=\\"test123\\"
g.maxCharCode=55295
g.Error=AL
g.constructor=function(i,k,l)
m=self
m.defaultSecret=i
m.table=l
m.hashFn=@k
if (@k == Aa) then m.hashFn=@md5
if (l == Aa) then m.table=m.defaultCharset
if (m.table.len != 64) then (new m.Error).constructor(\\"Invalid charset $0...\\",[m.table]).throw
return m
end function
g.getHash=function(p)
m=self
hash=[]
q=m.hashFn(p)
for char in q
hash.push(char.code)
end for
hash.reverse
return hash
end function
g.encrypt=function(str,p)
m=self
if (p == Aa) then p=m.defaultSecret
hash=m.getHash(p)
AC=0
w=[]
x=0
y=(str.len % 3)
z=(str.len - y)
_A=function(AB)
if not m.table.hasIndex(AB) then
(new m.Error).constructor(\\"Invalid index $0...\\",[AB]).throw
end if
return m.table[AB]
end function
AD=function(AE,AG)
return bitwise(\\"&\\",AE,AG)
end function
AI=function(AE,AG)
return bitwise(\\"<<\\",AE,AG)
end function
AJ=function(AE,AG)
return bitwise(\\">>\\",AE,AG)
end function
while (x < z)
e=hash[((x % hash.len) - Ac)]
AE=AI((str[x].code + e),16)
AG=AI((str[(x + Ac)].code + e),8)
AK=(str[(x + 2)].code + e)
AM=((AE + AG) + AK)
w.push(_A(AD(AJ(AM,18),Ab)))
w.push(_A(AD(AJ(AM,12),Ab)))
w.push(_A(AD(AJ(AM,6),Ab)))
w.push(_A(AD(AM,Ab)))
x=(x + 3)
end while
if (y == 2) then
e=hash[((x % hash.len) - Ac)]
AE=AI((str[x].code + e),8)
AG=(str[(x + Ac)].code + e)
AM=(AE + AG)
w.push(_A(AJ(AM,10)))
w.push(_A(AD(AJ(AM,4),Ab)))
w.push(_A(AD(AI(AM,2),Ab)))
w.push(\\"=\\")
else if (y == Ac) then
e=hash[((x % hash.len) - Ac)]
AM=(str[x].code + e)
w.push(_A(AJ(AM,2)))
w.push(_A(AD(AI(AM,4),Ab)))
w.push(\\"==\\")
end if
return w.join(\\"\\")
end function
g.decrypt=function(str,p)
m=self
if (p == Aa) then p=m.defaultSecret
hash=m.getHash(p)
AC=0
AP=hash.len
w=[]
AQ=0
AR=0
x=0
AC=0
z=str.len
AD=function(AE,AG)
return bitwise(\\"&\\",AE,AG)
end function
AJ=function(AE,AG)
return bitwise(\\">>\\",AE,AG)
end function
while (x < z)
AM=m.table.indexOf(str[x])
AS=AQ
AQ=(AQ + Ac)
if (AS % 4) then
AR=((AR * 64) + AM)
else
AR=AM
end if
if (AS % 4) then
AT=(((floor((AC / 3)) * 3) % AP) - Ac)
if not hash.hasIndex(AT) then break
e=hash[AT]
AU=AD((-2 * AQ),6)
AU=AJ(AR,AU)
AU=AD(255,AU)
if (AU != 0) then
AV=(AU - e)
if (AV > m.maxCharCode) then break
w.push(char(AV))
end if
AC=(AC + Ac)
end if
x=(x + Ac)
end while
return w.join(\\"\\")
end function
AW=(new g).constructor(\\"test\\")
AX=\\"abcde\\"
AY=AW.encrypt(AX)
AZ=AW.decrypt(AY)
print(AY)
print(AZ)
end function
F",
]
`;

exports[`parse default scripts random.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function(seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function(seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=((seedVal + char.code) + pos)
pos=(pos - 1)
end for
return seedVal
end function
Random.gen=function(min,max,seed,inc)
me=self
pool=me.pool
if (inc == null) then inc=true
if (seed == null) then seed=me.defaultSeed
if pool.hasIndex(seed) then
ps=pool[seed]
if not inc then return ps.value
ps.generation=(ps.generation + 1)
val=floor(((rnd((ps.value + ps.generation)) * (max - min)) + min))
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor(((rnd(seedVal) * (max - min)) + min))
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function(min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while (index < amount)
temp=me.gen(min,max,seed)
result.push(temp)
index=(index + 1)
end while
if (keepPool != true) then me.pool.remove(seed)
return result
end function
Random.get=function(min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))
end function
MAIN()",
]
`;

exports[`parse default scripts random.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H={}
H.pool={}
H.defaultSeed=\\"random\\"
H.createPool=function(L,M)
return {\\"seed\\":L,\\"value\\":M,\\"generation\\":0}
end function
H.calcSeed=function(L)
O=0
P=L.len
for char in L
O=((O + char.code) + P)
P=(P - 1)
end for
return O
end function
H.gen=function(T,U,L,V)
W=self
I=W.pool
if (V == null) then V=true
if (L == null) then L=W.defaultSeed
if I.hasIndex(L) then
X=I[L]
if not V then return X.value
X.generation=(X.generation + 1)
M=floor(((rnd((X.value + X.generation)) * (U - T)) + T))
X.value=M
return M
end if
O=W.calcSeed(L)
M=floor(((rnd(O) * (U - T)) + T))
I[L]=W.createPool(O,M)
return M
end function
H.seq=function(T,U,L,b,c)
W=self
d=0
e=[]
while (d < b)
f=W.gen(T,U,L)
e.push(f)
d=(d + 1)
end while
if (c != true) then W.pool.remove(L)
return e
end function
H.get=function(T,U)
return self.gen(T,U)
end function
print(H.get(100,500))
print(H.seq(100,500,\\"test\\",10))
end function
F",
]
`;

exports[`parse default scripts simple-object.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test={}
test.here=\\"was\\"
test.was=function()
print(self.here)
end function
print(test.was())
end function
MAIN()",
]
`;

exports[`parse default scripts simple-object.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H={}
H.here=\\"was\\"
H.was=function()
print(self.here)
end function
print(H.was)
end function
F",
]
`;

exports[`parse default scripts slice.src 1`] = `
Array [
  "globals.globals=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
divideString=function(str,limit)
offset=0
maxLen=str.len
frags=[]
while (offset < maxLen)
next=(offset + limit)
frags.push(str[offset:next])
offset=next
end while
return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\",5))
end function
MAIN()",
]
`;

exports[`parse default scripts slice.src uglify 1`] = `
Array [
  "globals.globals=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H=function(str,I)
J=0
K=str.len
M=[]
while (J < K)
N=(J + I)
M.push(str[J:N])
J=N
end while
return M
end function
print(H(\\"blahhblahhblahhblahhblahhblahhgad\\",5))
end function
F",
]
`;

exports[`parse default scripts unary.src 1`] = `
Array [
  "globals.globals=globals
globals.K=\\"was\\"
globals.J=false
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=function()
return null
end function
print((@\\"was\\".split and (false or not false)))
print(@(\\"was\\".split and (false or not false)))
print((not \\"was\\".split and (false or not false)))
print(not (\\"was\\".split and (false or not false)))
print((-1 + 2))
print(-(1 + 2))
end function
MAIN()",
]
`;

exports[`parse default scripts unary.src uglify 1`] = `
Array [
  "globals.globals=globals
globals.K=\\"was\\"
globals.J=false
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H=function()
return null
end function
print((@K.split and (J or not J)))
print(@(K.split and (J or not J)))
print((not K.split and (J or not J)))
print(not (K.split and (J or not J)))
print((-1 + 2))
print(-(1 + 2))
end function
F",
]
`;

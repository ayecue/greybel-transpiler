// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
Array [
  "AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts ascii.src beautify 1`] = `
Array [
  "AsciiGen = {}
map = {}
map.a = [\\"||¯|| \\", \\"||_|| \\", \\"|| || \\"]
map.b = [\\"||¯/ \\", \\"|| \\\\ \\", \\"||_/ \\"]
map.c = [\\"||¯ \\", \\"||  \\", \\"||_ \\"]
map.d = [\\"||¯\\\\\\\\ \\", \\"|| // \\", \\"||//  \\"]
map.e = [\\"||¯ \\", \\"||- \\", \\"||_ \\"]
map.f = [\\"||¯ \\", \\"||_ \\", \\"||  \\"]
map.g = [\\"||¯¯  \\", \\"|| \\\\\\\\ \\", \\"||_|| \\"]
map.h = [\\"|| || \\", \\"||-|| \\", \\"|| || \\"]
map.i = [\\"|| \\", \\"|| \\", \\"|| \\"]
map.j = [\\" ¯||¯ \\", \\"  ||  \\", \\"|_||  \\"]
map.k = [\\"||  / \\", \\"|| /  \\", \\"||¯\\\\\\\\ \\"]
map.l = [\\"||  \\", \\"||  \\", \\"||_ \\"]
map.m = [\\"||\\\\\\\\/|| \\", \\"||   || \\", \\"||   || \\"]
map.n = [\\"||\\\\\\\\ || \\", \\"|| \\\\\\\\|| \\", \\"||  \\\\|| \\"]
map.o = [\\"||¯|| \\", \\"|| || \\", \\"||_|| \\"]
map.p = [\\"||¯|| \\", \\"||_|| \\", \\"||    \\"]
map.q = [\\"||¯||  \\", \\"|| ||  \\", \\"||_||¬ \\"]
map.r = [\\"||¯|| \\", \\"||¯\\\\\\\\ \\", \\"|| || \\"]
map.s = [\\"||¯¯ \\", \\" \\\\\\\\  \\", \\"__|| \\"]
map.t = [\\"¯||¯ \\", \\" ||  \\", \\" ||  \\"]
map.u = [\\"|| || \\", \\"|| || \\", \\"||_|| \\"]
map.v = [\\"\\\\\\\\ || \\", \\" \\\\\\\\|| \\", \\"  \\\\\\\\| \\"]
map.w = [\\"\\\\\\\\ |\\\\\\\\ | \\", \\" \\\\\\\\| \\\\\\\\| \\", \\"  \\\\\\\\  \\\\\\\\ \\"]
map.x = [\\"\\\\\\\\  / \\", \\" \\\\\\\\/  \\", \\" //\\\\  \\"]
map.y = [\\"\\\\\\\\  // \\", \\" \\\\\\\\//  \\", \\"  ||   \\"]
map.z = [\\"¯// \\", \\"//  \\", \\"||_ \\"]
map[\\"0\\"] = [\\"||¯|| \\", \\"||x|| \\", \\"||_|| \\"]
map[\\"1\\"] = [\\"'|| \\", \\" || \\", \\" || \\"]
map[\\"2\\"] = [\\"¯¯|| \\", \\"||¯  \\", \\"||_  \\"]
map[\\"3\\"] = [\\"¯|| \\", \\"-|| \\", \\"_|| \\"]
map[\\"4\\"] = [\\" /|| \\", \\"/_|| \\", \\"  || \\"]
map[\\"5\\"] = [\\"||¯¯ \\", \\" ¯|| \\", \\" _|| \\"]
map[\\"6\\"] = [\\"||¯¯  \\", \\"||¯|| \\", \\"||_|| \\"]
map[\\"7\\"] = [\\"¯¯// \\", \\" //  \\", \\"//   \\"]
map[\\"8\\"] = [\\"||¯|| \\", \\"||-|| \\", \\"||_|| \\"]
map[\\"9\\"] = [\\"||¯|| \\", \\"  ¯|| \\", \\"  //  \\"]
map[\\" \\"] = [\\"  \\", \\"  \\", \\"  \\"]
AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [[], [], []]
	signs = self.MAP

	for char in str
		char = char.lower

		if (signs.hasIndex(char)) then
			r[0].push(signs[char][0])
			r[1].push(signs[char][1])
			r[2].push(signs[char][2])
		end if
	end for

	if (typeof(colors) == \\"string\\") then
		r[0] = [\\"<color=#\\" + colors + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors + \\">\\"] + r[2] + [\\"</color>\\"]
	else if (typeof(colors) == \\"list\\") then
		r[0] = [\\"<color=#\\" + colors[0] + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors[1] + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors[2] + \\">\\"] + r[2] + [\\"</color>\\"]
	end if

	return [r[0].join(\\"\\"), r[1].join(\\"\\"), r[2].join(\\"\\")].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts ascii.src uglify 1`] = `
Array [
  "globals.H=globals
H.x=\\"||¯|| \\"
H.w=\\"||_|| \\"
H.t=\\"|| || \\"
H.r=\\"||¯ \\"
H.v=\\"||  \\"
H.s=\\"||_ \\"
H.y=\\"||¯\\\\\\\\ \\"
H.u=\\"|| \\"
H.z=\\"  \\"
H._A=\\"<color=#\\"
H.AC=\\">\\"
H.AB=\\"</color>\\"
I={}
map={}
map.a=[x,w,t]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[r,v,s]
map.d=[y,\\"|| // \\",\\"||//  \\"]
map.e=[r,\\"||- \\",s]
map.f=[r,s,v]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",w]
map.h=[t,\\"||-|| \\",t]
map.i=[u,u,u]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",y]
map.l=[v,v,s]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[x,t,w]
map.p=[x,w,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[x,y,t]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[t,t,w]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",s]
map[\\"0\\"]=[x,\\"||x|| \\",w]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",x,w]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[x,\\"||-|| \\",w]
map[\\"9\\"]=[x,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[z,z,z]
I.MAP=map
I.gen=function(str,l)
a=[[],[],[]]
m=self.MAP
for char in str
char=char.lower
if (m.hasIndex(char)) then
a[0].push(m[char][0])
a[1].push(m[char][1])
a[2].push(m[char][2])
end if
end for
if (typeof(l)==\\"string\\") then
a[0]=[_A+l+AC]+a[0]+[AB]
a[1]=[_A+l+AC]+a[1]+[AB]
a[2]=[_A+l+AC]+a[2]+[AB]
else if (typeof(l)==\\"list\\") then
a[0]=[_A+l[0]+AC]+a[0]+[AB]
a[1]=[_A+l[1]+AC]+a[1]+[AB]
a[2]=[_A+l[2]+AC]+a[2]+[AB]
end if
return [a[0].join(\\"\\"),a[1].join(\\"\\"),a[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(I.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts binary-expressions.src 1`] = `
Array [
  "a=a/b
a=a*b
a=a-b
a=a+b
bitwise(\\"<<\\",a,b)
bitwise(\\">>\\",a,b)
w=bitwise(\\">>\\",bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c))),a)
bitwise(\\"|\\",a,b)
bitwise(\\"&\\",a,b)
a^b
a and b
a or b",
]
`;

exports[`parse default scripts binary-expressions.src beautify 1`] = `
Array [
  "a = a / b
a = a * b
a = a - b
a = a + b
bitwise(\\"<<\\", a, b)
bitwise(\\">>\\", a, b)
w = bitwise(\\">>\\", bitwise(\\">>>\\", a, (bitwise(\\"<<\\", b, c))), a)
bitwise(\\"|\\", a, b)
bitwise(\\"&\\", a, b)
a ^ b
a and b
a or b",
]
`;

exports[`parse default scripts binary-expressions.src uglify 1`] = `
Array [
  "I=I/J
I=I*J
I=I-J
I=I+J
bitwise(\\"<<\\",I,J)
bitwise(\\">>\\",I,J)
K=bitwise(\\">>\\",bitwise(\\">>>\\",I,(bitwise(\\"<<\\",J,L))),I)
bitwise(\\"|\\",I,J)
bitwise(\\"&\\",I,J)
I^J
I and J
I or J",
]
`;

exports[`parse default scripts comments.src 1`] = `
Array [
  "//comment
myVariable
//comment2
test=2
//comment3",
]
`;

exports[`parse default scripts comments.src beautify 1`] = `
Array [
  "//comment
myVariable
//comment2
test = 2
//comment3",
]
`;

exports[`parse default scripts comments.src uglify 1`] = `
Array [
  "I
J=2",
]
`;

exports[`parse default scripts default-args.src 1`] = `
Array [
  "test=function(arg1=0,arg2=\\"test\\")
print(arg1)
print(arg2)
end function
test
test(\\"foo\\",false)
var1=\\"test\\"
var2=\\"test\\"
var3=\\"test\\"",
]
`;

exports[`parse default scripts default-args.src beautify 1`] = `
Array [
  "test = function(arg1 = 0, arg2 = \\"test\\")
	print(arg1)
	print(arg2)
end function

test
test(\\"foo\\", false)
var1 = \\"test\\"
var2 = \\"test\\"
var3 = \\"test\\"",
]
`;

exports[`parse default scripts default-args.src uglify 1`] = `
Array [
  "globals.H=globals
H.O=\\"test\\"
I=function(M=0,N=\\"test\\")
print(M)
print(N)
end function
I
I(\\"foo\\",false)
J=O
K=O
L=O",
]
`;

exports[`parse default scripts envar.src 1`] = `
Array [
  "myvar2=\\"\\"foo\\"\\"
myvar=\\"\\"foo\\"\\"
print(\\"0.2\\")",
]
`;

exports[`parse default scripts envar.src beautify 1`] = `
Array [
  "myvar2 = \\"\\"foo\\"\\"
myvar = \\"\\"foo\\"\\"
print(\\"0.2\\")",
]
`;

exports[`parse default scripts envar.src uglify 1`] = `
Array [
  "J=\\"\\"foo\\"\\"
I=\\"\\"foo\\"\\"
print(\\"0.2\\")",
]
`;

exports[`parse default scripts greybel-utils.src 1`] = `
Array [
  "MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if (not MODULES.hasIndex(r)) then
exit(\\"Module \\"+r+\\" cannot be found...\\")
end if
module=@MODULES[r]
return @module(r).exports
end function
MODULES[\\"B\\"]=function(r)
module={}
if (EXPORTED.hasIndex(r)) then
module=EXPORTED[r]
end if
if (not module.hasIndex(\\"exports\\")) then
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end if
EXPORTED[r]=module
return EXPORTED[r]
end function
foo = __REQUIRE(\\"B\\")
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
myvar2=\\"\\"foo\\"\\"
myvar2=\\"\\"foo\\"\\"
lastimport=\\"hi\\"
test=123
was=123
x=123
print(123)
\\"true\\"
//debugger",
]
`;

exports[`parse default scripts greybel-utils.src beautify 1`] = `
Array [
  "MODULES = {}
EXPORTED = {}

__REQUIRE = function(r)
	if (not MODULES.hasIndex(r)) then
		exit(\\"Module \\" + r + \\" cannot be found...\\")
	end if

	module = @MODULES[r]
	return @module(r).exports
end function

MODULES[\\"B\\"] = function(r)
	module = {}

	if (EXPORTED.hasIndex(r)) then
		module = EXPORTED[r]
	end if

	if (not module.hasIndex(\\"exports\\")) then
		AsciiGen = {}
map = {}
map.a = [\\"||¯|| \\", \\"||_|| \\", \\"|| || \\"]
map.b = [\\"||¯/ \\", \\"|| \\\\ \\", \\"||_/ \\"]
map.c = [\\"||¯ \\", \\"||  \\", \\"||_ \\"]
map.d = [\\"||¯\\\\\\\\ \\", \\"|| // \\", \\"||//  \\"]
map.e = [\\"||¯ \\", \\"||- \\", \\"||_ \\"]
map.f = [\\"||¯ \\", \\"||_ \\", \\"||  \\"]
map.g = [\\"||¯¯  \\", \\"|| \\\\\\\\ \\", \\"||_|| \\"]
map.h = [\\"|| || \\", \\"||-|| \\", \\"|| || \\"]
map.i = [\\"|| \\", \\"|| \\", \\"|| \\"]
map.j = [\\" ¯||¯ \\", \\"  ||  \\", \\"|_||  \\"]
map.k = [\\"||  / \\", \\"|| /  \\", \\"||¯\\\\\\\\ \\"]
map.l = [\\"||  \\", \\"||  \\", \\"||_ \\"]
map.m = [\\"||\\\\\\\\/|| \\", \\"||   || \\", \\"||   || \\"]
map.n = [\\"||\\\\\\\\ || \\", \\"|| \\\\\\\\|| \\", \\"||  \\\\|| \\"]
map.o = [\\"||¯|| \\", \\"|| || \\", \\"||_|| \\"]
map.p = [\\"||¯|| \\", \\"||_|| \\", \\"||    \\"]
map.q = [\\"||¯||  \\", \\"|| ||  \\", \\"||_||¬ \\"]
map.r = [\\"||¯|| \\", \\"||¯\\\\\\\\ \\", \\"|| || \\"]
map.s = [\\"||¯¯ \\", \\" \\\\\\\\  \\", \\"__|| \\"]
map.t = [\\"¯||¯ \\", \\" ||  \\", \\" ||  \\"]
map.u = [\\"|| || \\", \\"|| || \\", \\"||_|| \\"]
map.v = [\\"\\\\\\\\ || \\", \\" \\\\\\\\|| \\", \\"  \\\\\\\\| \\"]
map.w = [\\"\\\\\\\\ |\\\\\\\\ | \\", \\" \\\\\\\\| \\\\\\\\| \\", \\"  \\\\\\\\  \\\\\\\\ \\"]
map.x = [\\"\\\\\\\\  / \\", \\" \\\\\\\\/  \\", \\" //\\\\  \\"]
map.y = [\\"\\\\\\\\  // \\", \\" \\\\\\\\//  \\", \\"  ||   \\"]
map.z = [\\"¯// \\", \\"//  \\", \\"||_ \\"]
map[\\"0\\"] = [\\"||¯|| \\", \\"||x|| \\", \\"||_|| \\"]
map[\\"1\\"] = [\\"'|| \\", \\" || \\", \\" || \\"]
map[\\"2\\"] = [\\"¯¯|| \\", \\"||¯  \\", \\"||_  \\"]
map[\\"3\\"] = [\\"¯|| \\", \\"-|| \\", \\"_|| \\"]
map[\\"4\\"] = [\\" /|| \\", \\"/_|| \\", \\"  || \\"]
map[\\"5\\"] = [\\"||¯¯ \\", \\" ¯|| \\", \\" _|| \\"]
map[\\"6\\"] = [\\"||¯¯  \\", \\"||¯|| \\", \\"||_|| \\"]
map[\\"7\\"] = [\\"¯¯// \\", \\" //  \\", \\"//   \\"]
map[\\"8\\"] = [\\"||¯|| \\", \\"||-|| \\", \\"||_|| \\"]
map[\\"9\\"] = [\\"||¯|| \\", \\"  ¯|| \\", \\"  //  \\"]
map[\\" \\"] = [\\"  \\", \\"  \\", \\"  \\"]
AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [[], [], []]
	signs = self.MAP

	for char in str
		char = char.lower

		if (signs.hasIndex(char)) then
			r[0].push(signs[char][0])
			r[1].push(signs[char][1])
			r[2].push(signs[char][2])
		end if
	end for

	if (typeof(colors) == \\"string\\") then
		r[0] = [\\"<color=#\\" + colors + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors + \\">\\"] + r[2] + [\\"</color>\\"]
	else if (typeof(colors) == \\"list\\") then
		r[0] = [\\"<color=#\\" + colors[0] + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors[1] + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors[2] + \\">\\"] + r[2] + [\\"</color>\\"]
	end if

	return [r[0].join(\\"\\"), r[1].join(\\"\\"), r[2].join(\\"\\")].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))
	end if

	EXPORTED[r] = module
	return EXPORTED[r]
end function

foo = __REQUIRE(\\"B\\")
AsciiGen = {}
map = {}
map.a = [\\"||¯|| \\", \\"||_|| \\", \\"|| || \\"]
map.b = [\\"||¯/ \\", \\"|| \\\\ \\", \\"||_/ \\"]
map.c = [\\"||¯ \\", \\"||  \\", \\"||_ \\"]
map.d = [\\"||¯\\\\\\\\ \\", \\"|| // \\", \\"||//  \\"]
map.e = [\\"||¯ \\", \\"||- \\", \\"||_ \\"]
map.f = [\\"||¯ \\", \\"||_ \\", \\"||  \\"]
map.g = [\\"||¯¯  \\", \\"|| \\\\\\\\ \\", \\"||_|| \\"]
map.h = [\\"|| || \\", \\"||-|| \\", \\"|| || \\"]
map.i = [\\"|| \\", \\"|| \\", \\"|| \\"]
map.j = [\\" ¯||¯ \\", \\"  ||  \\", \\"|_||  \\"]
map.k = [\\"||  / \\", \\"|| /  \\", \\"||¯\\\\\\\\ \\"]
map.l = [\\"||  \\", \\"||  \\", \\"||_ \\"]
map.m = [\\"||\\\\\\\\/|| \\", \\"||   || \\", \\"||   || \\"]
map.n = [\\"||\\\\\\\\ || \\", \\"|| \\\\\\\\|| \\", \\"||  \\\\|| \\"]
map.o = [\\"||¯|| \\", \\"|| || \\", \\"||_|| \\"]
map.p = [\\"||¯|| \\", \\"||_|| \\", \\"||    \\"]
map.q = [\\"||¯||  \\", \\"|| ||  \\", \\"||_||¬ \\"]
map.r = [\\"||¯|| \\", \\"||¯\\\\\\\\ \\", \\"|| || \\"]
map.s = [\\"||¯¯ \\", \\" \\\\\\\\  \\", \\"__|| \\"]
map.t = [\\"¯||¯ \\", \\" ||  \\", \\" ||  \\"]
map.u = [\\"|| || \\", \\"|| || \\", \\"||_|| \\"]
map.v = [\\"\\\\\\\\ || \\", \\" \\\\\\\\|| \\", \\"  \\\\\\\\| \\"]
map.w = [\\"\\\\\\\\ |\\\\\\\\ | \\", \\" \\\\\\\\| \\\\\\\\| \\", \\"  \\\\\\\\  \\\\\\\\ \\"]
map.x = [\\"\\\\\\\\  / \\", \\" \\\\\\\\/  \\", \\" //\\\\  \\"]
map.y = [\\"\\\\\\\\  // \\", \\" \\\\\\\\//  \\", \\"  ||   \\"]
map.z = [\\"¯// \\", \\"//  \\", \\"||_ \\"]
map[\\"0\\"] = [\\"||¯|| \\", \\"||x|| \\", \\"||_|| \\"]
map[\\"1\\"] = [\\"'|| \\", \\" || \\", \\" || \\"]
map[\\"2\\"] = [\\"¯¯|| \\", \\"||¯  \\", \\"||_  \\"]
map[\\"3\\"] = [\\"¯|| \\", \\"-|| \\", \\"_|| \\"]
map[\\"4\\"] = [\\" /|| \\", \\"/_|| \\", \\"  || \\"]
map[\\"5\\"] = [\\"||¯¯ \\", \\" ¯|| \\", \\" _|| \\"]
map[\\"6\\"] = [\\"||¯¯  \\", \\"||¯|| \\", \\"||_|| \\"]
map[\\"7\\"] = [\\"¯¯// \\", \\" //  \\", \\"//   \\"]
map[\\"8\\"] = [\\"||¯|| \\", \\"||-|| \\", \\"||_|| \\"]
map[\\"9\\"] = [\\"||¯|| \\", \\"  ¯|| \\", \\"  //  \\"]
map[\\" \\"] = [\\"  \\", \\"  \\", \\"  \\"]
AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [[], [], []]
	signs = self.MAP

	for char in str
		char = char.lower

		if (signs.hasIndex(char)) then
			r[0].push(signs[char][0])
			r[1].push(signs[char][1])
			r[2].push(signs[char][2])
		end if
	end for

	if (typeof(colors) == \\"string\\") then
		r[0] = [\\"<color=#\\" + colors + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors + \\">\\"] + r[2] + [\\"</color>\\"]
	else if (typeof(colors) == \\"list\\") then
		r[0] = [\\"<color=#\\" + colors[0] + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors[1] + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors[2] + \\">\\"] + r[2] + [\\"</color>\\"]
	end if

	return [r[0].join(\\"\\"), r[1].join(\\"\\"), r[2].join(\\"\\")].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))
myvar2 = \\"\\"foo\\"\\"
myvar2 = \\"\\"foo\\"\\"
lastimport = \\"hi\\"
test = 123
was = 123
x = 123
print(123)
\\"true\\"
//debugger",
]
`;

exports[`parse default scripts greybel-utils.src uglify 1`] = `
Array [
  "globals.H=globals
H.AC=\\"||¯|| \\"
H.AB=\\"||_|| \\"
H.y=\\"|| || \\"
H.w=\\"||¯ \\"
H._A=\\"||  \\"
H.x=\\"||_ \\"
H.AD=\\"||¯\\\\\\\\ \\"
H.AI=\\"||¯¯  \\"
H.AJ=\\"||-|| \\"
H.z=\\"|| \\"
H.AK=\\"||   || \\"
H.AL=\\"||¯¯ \\"
H.AM=\\" ||  \\"
H.AN=\\" || \\"
H.AE=\\"  \\"
H.AO=0
H.AP=1
H.AQ=2
H.AF=\\"<color=#\\"
H.AH=\\">\\"
H.AG=\\"</color>\\"
H.AR=\\"\\"
H.AS=123
C={}
D={}
E=function(b)
if (not C.hasIndex(b)) then
exit(\\"Module \\"+b+\\" cannot be found...\\")
end if
G=@C[b]
return @G(b).exports
end function
C[\\"B\\"]=function(b)
G={}
if (D.hasIndex(b)) then
G=D[b]
end if
if (not G.hasIndex(\\"exports\\")) then
J={}
map={}
map.a=[AC,AB,y]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[w,_A,x]
map.d=[AD,\\"|| // \\",\\"||//  \\"]
map.e=[w,\\"||- \\",x]
map.f=[w,x,_A]
map.g=[AI,\\"|| \\\\\\\\ \\",AB]
map.h=[y,AJ,y]
map.i=[z,z,z]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",AD]
map.l=[_A,_A,x]
map.m=[\\"||\\\\\\\\/|| \\",AK,AK]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[AC,y,AB]
map.p=[AC,AB,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[AC,AD,y]
map.s=[AL,\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",AM,AM]
map.u=[y,y,AB]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",x]
map[\\"0\\"]=[AC,\\"||x|| \\",AB]
map[\\"1\\"]=[\\"'|| \\",AN,AN]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[AL,\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[AI,AC,AB]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[AC,AJ,AB]
map[\\"9\\"]=[AC,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[AE,AE,AE]
J.MAP=map
J.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if (n.hasIndex(char)) then
b[AO].push(n[char][AO])
b[AP].push(n[char][AP])
b[AQ].push(n[char][AQ])
end if
end for
if (typeof(m)==\\"string\\") then
b[AO]=[AF+m+AH]+b[AO]+[AG]
b[AP]=[AF+m+AH]+b[AP]+[AG]
b[AQ]=[AF+m+AH]+b[AQ]+[AG]
else if (typeof(m)==\\"list\\") then
b[AO]=[AF+m[AO]+AH]+b[AO]+[AG]
b[AP]=[AF+m[AP]+AH]+b[AP]+[AG]
b[AQ]=[AF+m[AQ]+AH]+b[AQ]+[AG]
end if
return [b[AO].join(AR),b[AP].join(AR),b[AQ].join(AR)].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))
end if
D[b]=G
return D[b]
end function
I=E(\\"B\\")
J={}
map={}
map.a=[AC,AB,y]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[w,_A,x]
map.d=[AD,\\"|| // \\",\\"||//  \\"]
map.e=[w,\\"||- \\",x]
map.f=[w,x,_A]
map.g=[AI,\\"|| \\\\\\\\ \\",AB]
map.h=[y,AJ,y]
map.i=[z,z,z]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",AD]
map.l=[_A,_A,x]
map.m=[\\"||\\\\\\\\/|| \\",AK,AK]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[AC,y,AB]
map.p=[AC,AB,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[AC,AD,y]
map.s=[AL,\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",AM,AM]
map.u=[y,y,AB]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",x]
map[\\"0\\"]=[AC,\\"||x|| \\",AB]
map[\\"1\\"]=[\\"'|| \\",AN,AN]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[AL,\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[AI,AC,AB]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[AC,AJ,AB]
map[\\"9\\"]=[AC,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[AE,AE,AE]
J.MAP=map
J.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if (n.hasIndex(char)) then
b[AO].push(n[char][AO])
b[AP].push(n[char][AP])
b[AQ].push(n[char][AQ])
end if
end for
if (typeof(m)==\\"string\\") then
b[AO]=[AF+m+AH]+b[AO]+[AG]
b[AP]=[AF+m+AH]+b[AP]+[AG]
b[AQ]=[AF+m+AH]+b[AQ]+[AG]
else if (typeof(m)==\\"list\\") then
b[AO]=[AF+m[AO]+AH]+b[AO]+[AG]
b[AP]=[AF+m[AP]+AH]+b[AP]+[AG]
b[AQ]=[AF+m[AQ]+AH]+b[AQ]+[AG]
end if
return [b[AO].join(AR),b[AP].join(AR),b[AQ].join(AR)].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))
s=\\"\\"foo\\"\\"
s=\\"\\"foo\\"\\"
v=\\"hi\\"
t=AS
u=AS
h=AS
print(AS)
\\"true\\"
//debugger",
]
`;

exports[`parse default scripts greybel-utils-with-comments.src 1`] = `
Array [
  "MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if (not MODULES.hasIndex(r)) then
exit(\\"Module \\"+r+\\" cannot be found...\\")
end if
module=@MODULES[r]
return @module(r).exports
end function
MODULES[\\"B\\"]=function(r)
module={}
if (EXPORTED.hasIndex(r)) then
module=EXPORTED[r]
end if
if (not module.hasIndex(\\"exports\\")) then
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end if
EXPORTED[r]=module
return EXPORTED[r]
end function
foo = __REQUIRE(\\"B\\")
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
myvar2=\\"\\"foo\\"\\"
myvar2=\\"\\"foo\\"\\"
lastimport=\\"hi\\"
test=123
was=123
x=123
print(123)
\\"true\\"
//debugger",
]
`;

exports[`parse default scripts greybel-utils-with-comments.src beautify 1`] = `
Array [
  "MODULES = {}
EXPORTED = {}

__REQUIRE = function(r)
	if (not MODULES.hasIndex(r)) then
		exit(\\"Module \\" + r + \\" cannot be found...\\")
	end if

	module = @MODULES[r]
	return @module(r).exports
end function

MODULES[\\"B\\"] = function(r)
	module = {}

	if (EXPORTED.hasIndex(r)) then
		module = EXPORTED[r]
	end if

	if (not module.hasIndex(\\"exports\\")) then
		AsciiGen = {}
map = {}
map.a = [\\"||¯|| \\", \\"||_|| \\", \\"|| || \\"]
map.b = [\\"||¯/ \\", \\"|| \\\\ \\", \\"||_/ \\"]
map.c = [\\"||¯ \\", \\"||  \\", \\"||_ \\"]
map.d = [\\"||¯\\\\\\\\ \\", \\"|| // \\", \\"||//  \\"]
map.e = [\\"||¯ \\", \\"||- \\", \\"||_ \\"]
map.f = [\\"||¯ \\", \\"||_ \\", \\"||  \\"]
map.g = [\\"||¯¯  \\", \\"|| \\\\\\\\ \\", \\"||_|| \\"]
map.h = [\\"|| || \\", \\"||-|| \\", \\"|| || \\"]
map.i = [\\"|| \\", \\"|| \\", \\"|| \\"]
map.j = [\\" ¯||¯ \\", \\"  ||  \\", \\"|_||  \\"]
map.k = [\\"||  / \\", \\"|| /  \\", \\"||¯\\\\\\\\ \\"]
map.l = [\\"||  \\", \\"||  \\", \\"||_ \\"]
map.m = [\\"||\\\\\\\\/|| \\", \\"||   || \\", \\"||   || \\"]
map.n = [\\"||\\\\\\\\ || \\", \\"|| \\\\\\\\|| \\", \\"||  \\\\|| \\"]
map.o = [\\"||¯|| \\", \\"|| || \\", \\"||_|| \\"]
map.p = [\\"||¯|| \\", \\"||_|| \\", \\"||    \\"]
map.q = [\\"||¯||  \\", \\"|| ||  \\", \\"||_||¬ \\"]
map.r = [\\"||¯|| \\", \\"||¯\\\\\\\\ \\", \\"|| || \\"]
map.s = [\\"||¯¯ \\", \\" \\\\\\\\  \\", \\"__|| \\"]
map.t = [\\"¯||¯ \\", \\" ||  \\", \\" ||  \\"]
map.u = [\\"|| || \\", \\"|| || \\", \\"||_|| \\"]
map.v = [\\"\\\\\\\\ || \\", \\" \\\\\\\\|| \\", \\"  \\\\\\\\| \\"]
map.w = [\\"\\\\\\\\ |\\\\\\\\ | \\", \\" \\\\\\\\| \\\\\\\\| \\", \\"  \\\\\\\\  \\\\\\\\ \\"]
map.x = [\\"\\\\\\\\  / \\", \\" \\\\\\\\/  \\", \\" //\\\\  \\"]
map.y = [\\"\\\\\\\\  // \\", \\" \\\\\\\\//  \\", \\"  ||   \\"]
map.z = [\\"¯// \\", \\"//  \\", \\"||_ \\"]
map[\\"0\\"] = [\\"||¯|| \\", \\"||x|| \\", \\"||_|| \\"]
map[\\"1\\"] = [\\"'|| \\", \\" || \\", \\" || \\"]
map[\\"2\\"] = [\\"¯¯|| \\", \\"||¯  \\", \\"||_  \\"]
map[\\"3\\"] = [\\"¯|| \\", \\"-|| \\", \\"_|| \\"]
map[\\"4\\"] = [\\" /|| \\", \\"/_|| \\", \\"  || \\"]
map[\\"5\\"] = [\\"||¯¯ \\", \\" ¯|| \\", \\" _|| \\"]
map[\\"6\\"] = [\\"||¯¯  \\", \\"||¯|| \\", \\"||_|| \\"]
map[\\"7\\"] = [\\"¯¯// \\", \\" //  \\", \\"//   \\"]
map[\\"8\\"] = [\\"||¯|| \\", \\"||-|| \\", \\"||_|| \\"]
map[\\"9\\"] = [\\"||¯|| \\", \\"  ¯|| \\", \\"  //  \\"]
map[\\" \\"] = [\\"  \\", \\"  \\", \\"  \\"]
AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [[], [], []]
	signs = self.MAP

	for char in str
		char = char.lower

		if (signs.hasIndex(char)) then
			r[0].push(signs[char][0])
			r[1].push(signs[char][1])
			r[2].push(signs[char][2])
		end if
	end for

	if (typeof(colors) == \\"string\\") then
		r[0] = [\\"<color=#\\" + colors + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors + \\">\\"] + r[2] + [\\"</color>\\"]
	else if (typeof(colors) == \\"list\\") then
		r[0] = [\\"<color=#\\" + colors[0] + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors[1] + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors[2] + \\">\\"] + r[2] + [\\"</color>\\"]
	end if

	return [r[0].join(\\"\\"), r[1].join(\\"\\"), r[2].join(\\"\\")].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))
	end if

	EXPORTED[r] = module
	return EXPORTED[r]
end function

foo = __REQUIRE(\\"B\\")
AsciiGen = {}
map = {}
map.a = [\\"||¯|| \\", \\"||_|| \\", \\"|| || \\"]
map.b = [\\"||¯/ \\", \\"|| \\\\ \\", \\"||_/ \\"]
map.c = [\\"||¯ \\", \\"||  \\", \\"||_ \\"]
map.d = [\\"||¯\\\\\\\\ \\", \\"|| // \\", \\"||//  \\"]
map.e = [\\"||¯ \\", \\"||- \\", \\"||_ \\"]
map.f = [\\"||¯ \\", \\"||_ \\", \\"||  \\"]
map.g = [\\"||¯¯  \\", \\"|| \\\\\\\\ \\", \\"||_|| \\"]
map.h = [\\"|| || \\", \\"||-|| \\", \\"|| || \\"]
map.i = [\\"|| \\", \\"|| \\", \\"|| \\"]
map.j = [\\" ¯||¯ \\", \\"  ||  \\", \\"|_||  \\"]
map.k = [\\"||  / \\", \\"|| /  \\", \\"||¯\\\\\\\\ \\"]
map.l = [\\"||  \\", \\"||  \\", \\"||_ \\"]
map.m = [\\"||\\\\\\\\/|| \\", \\"||   || \\", \\"||   || \\"]
map.n = [\\"||\\\\\\\\ || \\", \\"|| \\\\\\\\|| \\", \\"||  \\\\|| \\"]
map.o = [\\"||¯|| \\", \\"|| || \\", \\"||_|| \\"]
map.p = [\\"||¯|| \\", \\"||_|| \\", \\"||    \\"]
map.q = [\\"||¯||  \\", \\"|| ||  \\", \\"||_||¬ \\"]
map.r = [\\"||¯|| \\", \\"||¯\\\\\\\\ \\", \\"|| || \\"]
map.s = [\\"||¯¯ \\", \\" \\\\\\\\  \\", \\"__|| \\"]
map.t = [\\"¯||¯ \\", \\" ||  \\", \\" ||  \\"]
map.u = [\\"|| || \\", \\"|| || \\", \\"||_|| \\"]
map.v = [\\"\\\\\\\\ || \\", \\" \\\\\\\\|| \\", \\"  \\\\\\\\| \\"]
map.w = [\\"\\\\\\\\ |\\\\\\\\ | \\", \\" \\\\\\\\| \\\\\\\\| \\", \\"  \\\\\\\\  \\\\\\\\ \\"]
map.x = [\\"\\\\\\\\  / \\", \\" \\\\\\\\/  \\", \\" //\\\\  \\"]
map.y = [\\"\\\\\\\\  // \\", \\" \\\\\\\\//  \\", \\"  ||   \\"]
map.z = [\\"¯// \\", \\"//  \\", \\"||_ \\"]
map[\\"0\\"] = [\\"||¯|| \\", \\"||x|| \\", \\"||_|| \\"]
map[\\"1\\"] = [\\"'|| \\", \\" || \\", \\" || \\"]
map[\\"2\\"] = [\\"¯¯|| \\", \\"||¯  \\", \\"||_  \\"]
map[\\"3\\"] = [\\"¯|| \\", \\"-|| \\", \\"_|| \\"]
map[\\"4\\"] = [\\" /|| \\", \\"/_|| \\", \\"  || \\"]
map[\\"5\\"] = [\\"||¯¯ \\", \\" ¯|| \\", \\" _|| \\"]
map[\\"6\\"] = [\\"||¯¯  \\", \\"||¯|| \\", \\"||_|| \\"]
map[\\"7\\"] = [\\"¯¯// \\", \\" //  \\", \\"//   \\"]
map[\\"8\\"] = [\\"||¯|| \\", \\"||-|| \\", \\"||_|| \\"]
map[\\"9\\"] = [\\"||¯|| \\", \\"  ¯|| \\", \\"  //  \\"]
map[\\" \\"] = [\\"  \\", \\"  \\", \\"  \\"]
AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [[], [], []]
	signs = self.MAP

	for char in str
		char = char.lower

		if (signs.hasIndex(char)) then
			r[0].push(signs[char][0])
			r[1].push(signs[char][1])
			r[2].push(signs[char][2])
		end if
	end for

	if (typeof(colors) == \\"string\\") then
		r[0] = [\\"<color=#\\" + colors + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors + \\">\\"] + r[2] + [\\"</color>\\"]
	else if (typeof(colors) == \\"list\\") then
		r[0] = [\\"<color=#\\" + colors[0] + \\">\\"] + r[0] + [\\"</color>\\"]
		r[1] = [\\"<color=#\\" + colors[1] + \\">\\"] + r[1] + [\\"</color>\\"]
		r[2] = [\\"<color=#\\" + colors[2] + \\">\\"] + r[2] + [\\"</color>\\"]
	end if

	return [r[0].join(\\"\\"), r[1].join(\\"\\"), r[2].join(\\"\\")].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))
myvar2 = \\"\\"foo\\"\\"
myvar2 = \\"\\"foo\\"\\"
lastimport = \\"hi\\"
test = 123
was = 123
x = 123
print(123)
\\"true\\"
//debugger",
]
`;

exports[`parse default scripts greybel-utils-with-comments.src uglify 1`] = `
Array [
  "globals.H=globals
H.AC=\\"||¯|| \\"
H.AB=\\"||_|| \\"
H.y=\\"|| || \\"
H.w=\\"||¯ \\"
H._A=\\"||  \\"
H.x=\\"||_ \\"
H.AD=\\"||¯\\\\\\\\ \\"
H.AI=\\"||¯¯  \\"
H.AJ=\\"||-|| \\"
H.z=\\"|| \\"
H.AK=\\"||   || \\"
H.AL=\\"||¯¯ \\"
H.AM=\\" ||  \\"
H.AN=\\" || \\"
H.AE=\\"  \\"
H.AO=0
H.AP=1
H.AQ=2
H.AF=\\"<color=#\\"
H.AH=\\">\\"
H.AG=\\"</color>\\"
H.AR=\\"\\"
H.AS=123
C={}
D={}
E=function(b)
if (not C.hasIndex(b)) then
exit(\\"Module \\"+b+\\" cannot be found...\\")
end if
G=@C[b]
return @G(b).exports
end function
C[\\"B\\"]=function(b)
G={}
if (D.hasIndex(b)) then
G=D[b]
end if
if (not G.hasIndex(\\"exports\\")) then
J={}
map={}
map.a=[AC,AB,y]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[w,_A,x]
map.d=[AD,\\"|| // \\",\\"||//  \\"]
map.e=[w,\\"||- \\",x]
map.f=[w,x,_A]
map.g=[AI,\\"|| \\\\\\\\ \\",AB]
map.h=[y,AJ,y]
map.i=[z,z,z]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",AD]
map.l=[_A,_A,x]
map.m=[\\"||\\\\\\\\/|| \\",AK,AK]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[AC,y,AB]
map.p=[AC,AB,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[AC,AD,y]
map.s=[AL,\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",AM,AM]
map.u=[y,y,AB]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",x]
map[\\"0\\"]=[AC,\\"||x|| \\",AB]
map[\\"1\\"]=[\\"'|| \\",AN,AN]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[AL,\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[AI,AC,AB]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[AC,AJ,AB]
map[\\"9\\"]=[AC,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[AE,AE,AE]
J.MAP=map
J.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if (n.hasIndex(char)) then
b[AO].push(n[char][AO])
b[AP].push(n[char][AP])
b[AQ].push(n[char][AQ])
end if
end for
if (typeof(m)==\\"string\\") then
b[AO]=[AF+m+AH]+b[AO]+[AG]
b[AP]=[AF+m+AH]+b[AP]+[AG]
b[AQ]=[AF+m+AH]+b[AQ]+[AG]
else if (typeof(m)==\\"list\\") then
b[AO]=[AF+m[AO]+AH]+b[AO]+[AG]
b[AP]=[AF+m[AP]+AH]+b[AP]+[AG]
b[AQ]=[AF+m[AQ]+AH]+b[AQ]+[AG]
end if
return [b[AO].join(AR),b[AP].join(AR),b[AQ].join(AR)].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))
end if
D[b]=G
return D[b]
end function
I=E(\\"B\\")
J={}
map={}
map.a=[AC,AB,y]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[w,_A,x]
map.d=[AD,\\"|| // \\",\\"||//  \\"]
map.e=[w,\\"||- \\",x]
map.f=[w,x,_A]
map.g=[AI,\\"|| \\\\\\\\ \\",AB]
map.h=[y,AJ,y]
map.i=[z,z,z]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",AD]
map.l=[_A,_A,x]
map.m=[\\"||\\\\\\\\/|| \\",AK,AK]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[AC,y,AB]
map.p=[AC,AB,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[AC,AD,y]
map.s=[AL,\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",AM,AM]
map.u=[y,y,AB]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",x]
map[\\"0\\"]=[AC,\\"||x|| \\",AB]
map[\\"1\\"]=[\\"'|| \\",AN,AN]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[AL,\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[AI,AC,AB]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[AC,AJ,AB]
map[\\"9\\"]=[AC,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[AE,AE,AE]
J.MAP=map
J.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if (n.hasIndex(char)) then
b[AO].push(n[char][AO])
b[AP].push(n[char][AP])
b[AQ].push(n[char][AQ])
end if
end for
if (typeof(m)==\\"string\\") then
b[AO]=[AF+m+AH]+b[AO]+[AG]
b[AP]=[AF+m+AH]+b[AP]+[AG]
b[AQ]=[AF+m+AH]+b[AQ]+[AG]
else if (typeof(m)==\\"list\\") then
b[AO]=[AF+m[AO]+AH]+b[AO]+[AG]
b[AP]=[AF+m[AP]+AH]+b[AP]+[AG]
b[AQ]=[AF+m[AQ]+AH]+b[AQ]+[AG]
end if
return [b[AO].join(AR),b[AP].join(AR),b[AQ].join(AR)].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))
s=\\"\\"foo\\"\\"
s=\\"\\"foo\\"\\"
v=\\"hi\\"
t=AS
u=AS
h=AS
print(AS)
\\"true\\"
//debugger",
]
`;

exports[`parse default scripts has-index.src 1`] = `
Array [
  "globals.test=\\"was\\"
locals.foo=\\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))",
]
`;

exports[`parse default scripts has-index.src beautify 1`] = `
Array [
  "globals.test = \\"was\\"
locals.foo = \\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))",
]
`;

exports[`parse default scripts has-index.src uglify 1`] = `
Array [
  "H.I=\\"was\\"
locals.J=\\"moo\\"
print(H.K(\\"test\\"))
print(locals.K(\\"foo\\"))",
]
`;

exports[`parse default scripts isa.src 1`] = `
Array [
  "print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(\\"abc\\" isa number)
print(\\"abc\\" isa string)
print(\\"abc\\" isa list)
print(\\"abc\\" isa map)
print([1,2,3] isa number)
print([1,2,3] isa string)
print([1,2,3] isa list)
print([1,2,3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)",
]
`;

exports[`parse default scripts isa.src beautify 1`] = `
Array [
  "print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(\\"abc\\" isa number)
print(\\"abc\\" isa string)
print(\\"abc\\" isa list)
print(\\"abc\\" isa map)
print([1, 2, 3] isa number)
print([1, 2, 3] isa string)
print([1, 2, 3] isa list)
print([1, 2, 3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)",
]
`;

exports[`parse default scripts isa.src uglify 1`] = `
Array [
  "globals.H=globals
H.I=\\"abc\\"
print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(I isa number)
print(I isa string)
print(I isa list)
print(I isa map)
print([1,2,3] isa number)
print([1,2,3] isa string)
print([1,2,3] isa list)
print([1,2,3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)",
]
`;

exports[`parse default scripts map.src 1`] = `
Array [
  "test={{\\"myTest\\":0,1:2}:true}
test2={[12,14]:true}
test3={test:234}
test4={true:\\"foo\\"}
test5={123:\\"bar\\"}",
]
`;

exports[`parse default scripts map.src beautify 1`] = `
Array [
  "test = {{\\"myTest\\": 0, 1: 2}: true}
test2 = {[12, 14]: true}
test3 = {test: 234}
test4 = {true: \\"foo\\"}
test5 = {123: \\"bar\\"}",
]
`;

exports[`parse default scripts map.src uglify 1`] = `
Array [
  "globals.H=globals
H.N=true
I={{\\"myTest\\":0,1:2}:N}
J={[12,14]:N}
K={I:234}
L={N:\\"foo\\"}
M={123:\\"bar\\"}",
]
`;

exports[`parse default scripts multiline-comment.src 1`] = `
Array [
  "//
//
//
//my Test
//
//  **
print(\\"test\\")
//
//
//  another comment
//
//  
// one line comment ",
]
`;

exports[`parse default scripts multiline-comment.src beautify 1`] = `
Array [
  "//
//
//
//my Test
//
//  **
print(\\"test\\")
//
//
//  another comment
//
//  
// one line comment ",
]
`;

exports[`parse default scripts multiline-comment.src uglify 1`] = `
Array [
  "print(\\"test\\")",
]
`;

exports[`parse default scripts negation.src 1`] = `
Array [
  "test=-1+2+-2+3
foo=[-1,-2+4,(-2)+-4+6]
print(test)
print(foo)",
]
`;

exports[`parse default scripts negation.src beautify 1`] = `
Array [
  "test = -1 + 2 + -2 + 3
foo = [-1, -2 + 4, (-2) + -4 + 6]
print(test)
print(foo)",
]
`;

exports[`parse default scripts negation.src uglify 1`] = `
Array [
  "I=-1+2+-2+3
J=[-1,-2+4,(-2)+-4+6]
print(I)
print(J)",
]
`;

exports[`parse default scripts obj-init.src 1`] = `
Array [
  "valueOfIdentifier=\\"foo\\"
myObject={\\"test\\":{\\"another\\":\\"123\\"},\\"value\\":\\"123\\",\\"idtf\\":valueOfIdentifier}
print([myObject.test.another,myObject.value,myObject.idtf])
myList=[{\\"another\\":\\"123\\"},\\"123\\",valueOfIdentifier]
print(myList)",
]
`;

exports[`parse default scripts obj-init.src beautify 1`] = `
Array [
  "valueOfIdentifier = \\"foo\\"

myObject = {\\"test\\": {\\"another\\": \\"123\\"}, \\"value\\": \\"123\\", \\"idtf\\": valueOfIdentifier}

print([myObject.test.another, myObject.value, myObject.idtf])

myList = [{\\"another\\": \\"123\\"}, \\"123\\", valueOfIdentifier]

print(myList)",
]
`;

exports[`parse default scripts obj-init.src uglify 1`] = `
Array [
  "globals.H=globals
H.P=\\"123\\"
I=\\"foo\\"
J={\\"test\\":{\\"another\\":P},\\"value\\":P,\\"idtf\\":I}
print([J.test.another,J.value,J.idtf])
O=[{\\"another\\":P},P,I]
print(O)",
]
`;

exports[`parse default scripts optimize.src 1`] = `
Array [
  "test=function(abc)
print(abc)
end function
superlangername=function(abc)
print(abc)
end function
superlangername3=function(abc)
print(abc)
end function
superlangername4=function(abc)
print(abc)
end function
superlangername5=function(abc)
print(abc)
end function
test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")",
]
`;

exports[`parse default scripts optimize.src beautify 1`] = `
Array [
  "test = function(abc)
	print(abc)
end function

superlangername = function(abc)
	print(abc)
end function

superlangername3 = function(abc)
	print(abc)
end function

superlangername4 = function(abc)
	print(abc)
end function

superlangername5 = function(abc)
	print(abc)
end function

test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")",
]
`;

exports[`parse default scripts optimize.src uglify 1`] = `
Array [
  "globals.H=globals
H.O=\\"xxxxxxxxxx\\"
I=function(N)
print(N)
end function
J=function(N)
print(N)
end function
K=function(N)
print(N)
end function
L=function(N)
print(N)
end function
M=function(N)
print(N)
end function
I(O)
J(O)
L(O)
J(O)
M(O)
K(O)",
]
`;

exports[`parse default scripts outer.src 1`] = `
Array [
  "main=function()
num=0
iterate=function()
clear_screen
text=\\"<mark=green><color=black>\\"+outer.num
print(outer.hasIndex(\\"num\\"))
if (outer.num>20) then
text=\\"<mark=yellow><color=green>\\"+outer.num
end if
if (outer.num>40) then
text=\\"<mark=red><color=yellow>\\"+outer.num
end if
if (outer.num<-20) then
text=\\"<mark=green><color=yellow>\\"+outer.num
end if
if (outer.num<-40) then
text=\\"<mark=yellow><color=red>\\"+outer.num
end if
print(text)
key=user_input(\\"test\\",false,true)
if (key==\\"UpArrow\\") then
outer.num=outer.num+1
else if (key==\\"DownArrow\\") then
outer.num=outer.num-1
else
exit(\\"bye\\")
end if
end function
while (true)
iterate
end while
end function
main",
]
`;

exports[`parse default scripts outer.src beautify 1`] = `
Array [
  "main = function()
	num = 0

	iterate = function()
		clear_screen
		text = \\"<mark=green><color=black>\\" + outer.num
		print(outer.hasIndex(\\"num\\"))
		
		if (outer.num > 20) then
			text = \\"<mark=yellow><color=green>\\" + outer.num
		end if
		
		if (outer.num > 40) then
			text = \\"<mark=red><color=yellow>\\" + outer.num
		end if
		
		if (outer.num < -20) then
			text = \\"<mark=green><color=yellow>\\" + outer.num
		end if
		
		if (outer.num < -40) then
			text = \\"<mark=yellow><color=red>\\" + outer.num
		end if
		print(text)
		key = user_input(\\"test\\", false, true)

		if (key == \\"UpArrow\\") then
			outer.num = outer.num + 1
		else if (key == \\"DownArrow\\") then
			outer.num = outer.num - 1
		else
			exit(\\"bye\\")
		end if

	end function

	while (true)
		iterate
	end while
end function
main",
]
`;

exports[`parse default scripts outer.src uglify 1`] = `
Array [
  "I=function
J=0
K=function
L
M=\\"<mark=green><color=black>\\"+outer.J
print(outer.N(\\"num\\"))
if (outer.J>20) then
M=\\"<mark=yellow><color=green>\\"+outer.J
end if
if (outer.J>40) then
M=\\"<mark=red><color=yellow>\\"+outer.J
end if
if (outer.J<-20) then
M=\\"<mark=green><color=yellow>\\"+outer.J
end if
if (outer.J<-40) then
M=\\"<mark=yellow><color=red>\\"+outer.J
end if
print(M)
O=user_input(\\"test\\",false,true)
if (O==\\"UpArrow\\") then
outer.J=outer.J+1
else if (O==\\"DownArrow\\") then
outer.J=outer.J-1
else
exit(\\"bye\\")
end if
end function
while (true)
K
end while
end function
I",
]
`;

exports[`parse default scripts password-generator.src 1`] = `
Array [
  "PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=PasswordGenerator.ALPHABETIC_CHARACTERS+PasswordGenerator.ALPHABETIC_CHARACTERS.upper+PasswordGenerator.NUMBER_CHARACTERS
PasswordGenerator.constructor=function()
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function(i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i==null) then
i=currentCharBuffer.len-1
end if
p=currentCharBuffer[i]
p=p+1
currentCharBuffer[i]=p
if (p==maxBufferSize) then
currentCharBuffer[i]=0
if (i==0) then
currentCharBuffer.push(0)
else
me.increaseBuffer(i-1)
end if
end if
end function
PasswordGenerator.gen=function()
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while index<currentCharBuffer.len
pointer=currentCharBuffer[index]
password=password+generatorCharacters[pointer]
if (index==currentCharBuffer.len-1) then
self.increaseBuffer
end if
index=index+1
end while
if (currentCharBuffer.len>me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor
index=0
max=10
result=[]
while (index<max)
result.push(pgen.gen)
index=index+1
end while
print(result)",
]
`;

exports[`parse default scripts password-generator.src beautify 1`] = `
Array [
  "PasswordGenerator = {}
PasswordGenerator.MAX_PASSWORD_LENGTH = 15
PasswordGenerator.ALPHABETIC_CHARACTERS = \\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS = \\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC = PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper + PasswordGenerator.NUMBER_CHARACTERS

PasswordGenerator.constructor = function()
	me = self
	me.buffer = [0]
	me.characters = me.ALPHA_NUMERIC
	return me
end function

PasswordGenerator.increaseBuffer = function(i)
	me = self
	currentCharBuffer = me.buffer
	maxBufferSize = me.characters.len
	
	if (i == null) then
		i = currentCharBuffer.len - 1
	end if
	p = currentCharBuffer[i]
	p = p + 1
	currentCharBuffer[i] = p

	if (p == maxBufferSize) then
		currentCharBuffer[i] = 0

		if (i == 0) then
			currentCharBuffer.push(0)
		else
			me.increaseBuffer(i - 1)
		end if
	end if

end function

PasswordGenerator.gen = function()
	me = self
	currentCharBuffer = me.buffer
	generatorCharacters = me.characters
	password = \\"\\"
	index = 0

	while index < currentCharBuffer.len
		pointer = currentCharBuffer[index]
		password = password + generatorCharacters[pointer]
		
		if (index == currentCharBuffer.len - 1) then
			self.increaseBuffer
		end if
		index = index + 1
	end while

	if (currentCharBuffer.len > me.MAX_PASSWORD_LENGTH) then
		return null
	end if

	return password
end function

pgen = (new PasswordGenerator).constructor
index = 0
max = 10
result = []

while (index < max)
	result.push(pgen.gen)
	index = index + 1
end while

print(result)",
]
`;

exports[`parse default scripts password-generator.src uglify 1`] = `
Array [
  "I={}
I.MAX_PASSWORD_LENGTH=15
I.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
I.NUMBER_CHARACTERS=\\"0123456789\\"
I.ALPHA_NUMERIC=I.ALPHABETIC_CHARACTERS+I.ALPHABETIC_CHARACTERS.upper+I.NUMBER_CHARACTERS
I.constructor=function
W=self
W.buffer=[0]
W.characters=W.ALPHA_NUMERIC
return W
end function
I.increaseBuffer=function(Z)
W=self
a=W.buffer
b=W.characters.len
if (Z==null) then
Z=a.len-1
end if
d=a[Z]
d=d+1
a[Z]=d
if (d==b) then
a[Z]=0
if (Z==0) then
a.push(0)
else
W.increaseBuffer(Z-1)
end if
end if
end function
I.gen=function
W=self
a=W.buffer
e=W.characters
f=\\"\\"
S=0
while S<a.len
g=a[S]
f=f+e[g]
if (S==a.len-1) then
self.increaseBuffer
end if
S=S+1
end while
if (a.len>W.MAX_PASSWORD_LENGTH) then
return null
end if
return f
end function
R=(new I).constructor
S=0
T=10
U=[]
while (S<T)
U.push(R.gen)
S=S+1
end while
print(U)",
]
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
Array [
  "String={}
String.constructor=function(str)
self.str=str
return self
end function
String.parse=function(values)
result=self.str
index=0
maxIndex=values.len
while index<maxIndex
result=result.replace(\\"$\\"+index,values[index])
index=index+1
end while
return (new self).constructor(result)
end function
String.startsWith=function(str)
return self.str.indexOf(str)==0
end function
String.substr=function(startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function(str)
return self.str.indexOf(str)
end function
String.replace=function(str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function()
return self.str
end function
String.length=function()
return self.str.len
end function
String.split=function(seperator)
return self.str.split(seperator)
end function
String.trim=function(seperator)
return (new self).constructor(self.str.trim)
end function
Error={}
Error.String=String
Error.constructor=function(message,values)
m=self
m.message=message
if (values!=null) then
m.message=(new m.String).constructor(message).parse(values).toString
end if
return m
end function
Error.throw=function()
exit(\\"<color=#ff0000>\\"+self.message+\\"</color>\\")
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret=\\"test123\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function(defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn==null) then
me.hashFn=@md5
end if
if charset==null then
me.table=me.defaultCharset
end if
if me.table.len!=64 then
(new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw
end if
return me
end function
Crypto.getHash=function(pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function(str,pw)
me=self
if (pw==null) then
pw=me.defaultSecret
end if
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=str.len%3
max=str.len-padding
get=function(v)
if (not me.table.hasIndex(v)) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw
end if
return me.table[v]
end function
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function(a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while position<max
m=hash[position%hash.len-1]
a=LSHIFT(str[position].code+m,16)
b=LSHIFT(str[position+1].code+m,8)
c=str[position+2].code+m
buffer=a+b+c
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=position+3
end while
if (padding==2) then
m=hash[position%hash.len-1]
a=LSHIFT(str[position].code+m,8)
b=str[position+1].code+m
buffer=a+b
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding==1) then
m=hash[position%hash.len-1]
buffer=str[position].code+m
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function(str,pw)
me=self
if (pw==null) then
pw=me.defaultSecret
end if
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while position<max
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=bitCounter+1
if (currentBit%4) then
bitStorage=bitStorage*64+buffer
else
bitStorage=buffer
end if
if (currentBit%4) then
expectedHashIndex=(floor(hashPointer/3)*3)%hashLength-1
if (not hash.hasIndex(expectedHashIndex)) then
break
end if
m=hash[expectedHashIndex]
operation=AND(-2*bitCounter,6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation!=0) then
charCode=operation-m
if (charCode>me.maxCharCode) then
break
end if
output.push(char(charCode))
end if
hashPointer=hashPointer+1
end if
position=position+1
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
pwd=\\"abcde\\"
foo=test.encrypt(pwd)
decrypted=test.decrypt(foo)
print(foo)
print(decrypted)",
]
`;

exports[`parse default scripts pseudo-crypto.src beautify 1`] = `
Array [
  "String = {}

String.constructor = function(str)
	self.str = str
	return self
end function

String.parse = function(values)
	result = self.str
	index = 0
	maxIndex = values.len

	while index < maxIndex
		result = result.replace(\\"$\\" + index, values[index])
		index = index + 1
	end while

	return (new self).constructor(result)
end function

String.startsWith = function(str)
	return self.str.indexOf(str) == 0
end function

String.substr = function(startIndex, endIndex)
	return (new self).constructor(slice(self.str, startIndex, endIndex))
end function

String.indexOf = function(str)
	return self.str.indexOf(str)
end function

String.replace = function(str, newStr)
	return (new self).constructor(self.str.replace(str, newStr))
end function

String.remove = function(str)
	return (new self).constructor(self.str.remove(str))
end function

String.toString = function()
	return self.str
end function

String.length = function()
	return self.str.len
end function

String.split = function(seperator)
	return self.str.split(seperator)
end function

String.trim = function(seperator)
	return (new self).constructor(self.str.trim)
end function

Error = {}
Error.String = String

Error.constructor = function(message, values)
	m = self
	m.message = message

	if (values != null) then
		m.message = (new m.String).constructor(message).parse(values).toString
	end if

	return m
end function

Error.throw = function()
	exit(\\"<color=#ff0000>\\" + self.message + \\"</color>\\")
end function

Crypto = {}
Crypto.defaultCharset = \\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret = \\"test123\\"
Crypto.maxCharCode = 55295
Crypto.Error = Error

Crypto.constructor = function(defaultSecret, hashFn, charset)
	me = self
	me.defaultSecret = defaultSecret
	me.table = charset
	me.hashFn = @hashFn
	
	if (@hashFn == null) then
		me.hashFn = @md5
	end if
	
	if charset == null then
		me.table = me.defaultCharset
	end if
	
	if me.table.len != 64 then
		(new me.Error).constructor(\\"Invalid charset $0...\\", [me.table]).throw
	end if
	return me
end function

Crypto.getHash = function(pw)
	me = self
	hash = []
	x = me.hashFn(pw)

	for char in x
		hash.push(char.code)
	end for

	hash.reverse
	return hash
end function

Crypto.encrypt = function(str, pw)
	me = self
	
	if (pw == null) then
		pw = me.defaultSecret
	end if
	hash = me.getHash(pw)
	hashPointer = 0
	output = []
	position = 0
	padding = str.len % 3
	max = str.len - padding

	get = function(v)
		if (not me.table.hasIndex(v)) then
			(new me.Error).constructor(\\"Invalid index $0...\\", [v]).throw
		end if
		return me.table[v]
	end function

	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function

	LSHIFT = function(a, b)
		return bitwise(\\"<<\\", a, b)
	end function

	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function

	while position < max
		m = hash[position % hash.len - 1]
		a = LSHIFT(str[position].code + m, 16)
		b = LSHIFT(str[position + 1].code + m, 8)
		c = str[position + 2].code + m
		buffer = a + b + c
		output.push(get(AND(RSHIFT(buffer, 18), 63)))
		output.push(get(AND(RSHIFT(buffer, 12), 63)))
		output.push(get(AND(RSHIFT(buffer, 6), 63)))
		output.push(get(AND(buffer, 63)))
		position = position + 3
	end while

	if (padding == 2) then
		m = hash[position % hash.len - 1]
		a = LSHIFT(str[position].code + m, 8)
		b = str[position + 1].code + m
		buffer = a + b
		output.push(get(RSHIFT(buffer, 10)))
		output.push(get(AND(RSHIFT(buffer, 4), 63)))
		output.push(get(AND(LSHIFT(buffer, 2), 63)))
		output.push(\\"=\\")
	else if (padding == 1) then
		m = hash[position % hash.len - 1]
		buffer = str[position].code + m
		output.push(get(RSHIFT(buffer, 2)))
		output.push(get(AND(LSHIFT(buffer, 4), 63)))
		output.push(\\"==\\")
	end if

	return output.join(\\"\\")
end function

Crypto.decrypt = function(str, pw)
	me = self
	
	if (pw == null) then
		pw = me.defaultSecret
	end if
	hash = me.getHash(pw)
	hashPointer = 0
	hashLength = hash.len
	output = []
	bitCounter = 0
	bitStorage = 0
	position = 0
	hashPointer = 0
	max = str.len

	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function

	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function

	while position < max
		buffer = me.table.indexOf(str[position])
		currentBit = bitCounter
		bitCounter = bitCounter + 1

		if (currentBit % 4) then
			bitStorage = bitStorage * 64 + buffer
		else
			bitStorage = buffer
		end if

		if (currentBit % 4) then
			expectedHashIndex = (floor(hashPointer / 3) * 3) % hashLength - 1
			
			if (not hash.hasIndex(expectedHashIndex)) then
				break
			end if
			m = hash[expectedHashIndex]
			operation = AND(-2 * bitCounter, 6)
			operation = RSHIFT(bitStorage, operation)
			operation = AND(255, operation)

			if (operation != 0) then
				charCode = operation - m
				
				if (charCode > me.maxCharCode) then
					break
				end if
				output.push(char(charCode))
			end if

			hashPointer = hashPointer + 1
		end if

		position = position + 1
	end while

	return output.join(\\"\\")
end function

test = (new Crypto).constructor(\\"test\\")
pwd = \\"abcde\\"
foo = test.encrypt(pwd)
decrypted = test.decrypt(foo)
print(foo)
print(decrypted)",
]
`;

exports[`parse default scripts pseudo-crypto.src uglify 1`] = `
Array [
  "globals.H=globals
H.Ah=1
H.Af=null
H.Ag=63
I={}
I.constructor=function(str)
self.str=str
return self
end function
I.parse=function(values)
h=self.str
i=0
j=values.len
while i<j
h=h.replace(\\"$\\"+i,values[i])
i=i+Ah
end while
return (new self).constructor(h)
end function
I.startsWith=function(str)
return self.str.indexOf(str)==0
end function
I.substr=function(l,s)
return (new self).constructor(n(self.str,l,s))
end function
I.indexOf=function(str)
return self.str.indexOf(str)
end function
I.replace=function(str,o)
return (new self).constructor(self.str.replace(str,o))
end function
I.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
I.toString=function
return self.str
end function
I.length=function
return self.str.len
end function
I.split=function(p)
return self.str.split(p)
end function
I.trim=function(p)
return (new self).constructor(self.str.trim)
end function
U={}
U.String=I
U.constructor=function(q,values)
r=self
r.message=q
if (values!=Af) then
r.message=(new r.String).constructor(q).parse(values).toString
end if
return r
end function
U.throw=function
exit(\\"<color=#ff0000>\\"+self.message+\\"</color>\\")
end function
W={}
W.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
W.defaultSecret=\\"test123\\"
W.maxCharCode=55295
W.Error=U
W.constructor=function(Y,t,u)
AW=self
AW.defaultSecret=Y
AW.table=u
AW.hashFn=@t
if (@t==Af) then
AW.hashFn=@_A
end if
if u==Af then
AW.table=AW.defaultCharset
end if
if AW.table.len!=64 then
(new AW.Error).constructor(\\"Invalid charset $0...\\",[AW.table]).throw
end if
return AW
end function
W.getHash=function(y)
AW=self
hash=[]
z=AW.hashFn(y)
for char in z
hash.push(char.code)
end for
hash.reverse
return hash
end function
W.encrypt=function(str,y)
AW=self
if (y==Af) then
y=AW.defaultSecret
end if
hash=AW.getHash(y)
AE=0
AF=[]
AG=0
AH=str.len%3
AI=str.len-AH
AJ=function(AV)
if (not AW.table.hasIndex(AV)) then
(new AW.Error).constructor(\\"Invalid index $0...\\",[AV]).throw
end if
return AW.table[AV]
end function
AK=function(AN,AP)
return bitwise(\\"&\\",AN,AP)
end function
AL=function(AN,AP)
return bitwise(\\"<<\\",AN,AP)
end function
AM=function(AN,AP)
return bitwise(\\">>\\",AN,AP)
end function
while AG<AI
r=hash[AG%hash.len-Ah]
AN=AL(str[AG].code+r,16)
AP=AL(str[AG+Ah].code+r,8)
AR=str[AG+2].code+r
AT=AN+AP+AR
AF.push(AJ(AK(AM(AT,18),Ag)))
AF.push(AJ(AK(AM(AT,12),Ag)))
AF.push(AJ(AK(AM(AT,6),Ag)))
AF.push(AJ(AK(AT,Ag)))
AG=AG+3
end while
if (AH==2) then
r=hash[AG%hash.len-Ah]
AN=AL(str[AG].code+r,8)
AP=str[AG+Ah].code+r
AT=AN+AP
AF.push(AJ(AM(AT,10)))
AF.push(AJ(AK(AM(AT,4),Ag)))
AF.push(AJ(AK(AL(AT,2),Ag)))
AF.push(\\"=\\")
else if (AH==Ah) then
r=hash[AG%hash.len-Ah]
AT=str[AG].code+r
AF.push(AJ(AM(AT,2)))
AF.push(AJ(AK(AL(AT,4),Ag)))
AF.push(\\"==\\")
end if
return AF.join(\\"\\")
end function
W.decrypt=function(str,y)
AW=self
if (y==Af) then
y=AW.defaultSecret
end if
hash=AW.getHash(y)
AE=0
AY=hash.len
AF=[]
AZ=0
Aa=0
AG=0
AE=0
AI=str.len
AK=function(AN,AP)
return bitwise(\\"&\\",AN,AP)
end function
AM=function(AN,AP)
return bitwise(\\">>\\",AN,AP)
end function
while AG<AI
AT=AW.table.indexOf(str[AG])
Ab=AZ
AZ=AZ+Ah
if (Ab%4) then
Aa=Aa*64+AT
else
Aa=AT
end if
if (Ab%4) then
Ac=(floor(AE/3)*3)%AY-Ah
if (not hash.hasIndex(Ac)) then
break
end if
r=hash[Ac]
Ad=AK(-2*AZ,6)
Ad=AM(Aa,Ad)
Ad=AK(255,Ad)
if (Ad!=0) then
Ae=Ad-r
if (Ae>AW.maxCharCode) then
break
end if
AF.push(char(Ae))
end if
AE=AE+Ah
end if
AG=AG+Ah
end while
return AF.join(\\"\\")
end function
d=(new W).constructor(\\"test\\")
e=\\"abcde\\"
f=d.encrypt(e)
g=d.decrypt(f)
print(f)
print(g)",
]
`;

exports[`parse default scripts random.src 1`] = `
Array [
  "Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function(seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function(seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=seedVal+char.code+pos
pos=pos-1
end for
return seedVal
end function
Random.gen=function(min,max,seed,inc)
me=self
pool=me.pool
if (inc==null) then
inc=true
end if
if (seed==null) then
seed=me.defaultSeed
end if
if (pool.hasIndex(seed)) then
ps=pool[seed]
if (not inc) then
return ps.value
end if
ps.generation=ps.generation+1
val=floor((rnd(ps.value+ps.generation)*(max-min))+min)
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor((rnd(seedVal)*(max-min))+min)
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function(min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while index<amount
temp=me.gen(min,max,seed)
result.push(temp)
index=index+1
end while
if (keepPool!=true) then
me.pool.remove(seed)
end if
return result
end function
Random.get=function(min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))",
]
`;

exports[`parse default scripts random.src beautify 1`] = `
Array [
  "Random = {}
Random.pool = {}
Random.defaultSeed = \\"random\\"

Random.createPool = function(seed, val)
	return {\\"seed\\": seed, \\"value\\": val, \\"generation\\": 0}
end function

Random.calcSeed = function(seed)
	seedVal = 0
	pos = seed.len

	for char in seed
		seedVal = seedVal + char.code + pos
		pos = pos - 1
	end for

	return seedVal
end function

Random.gen = function(min, max, seed, inc)
	me = self
	pool = me.pool
	
	if (inc == null) then
		inc = true
	end if
	
	if (seed == null) then
		seed = me.defaultSeed
	end if

	if (pool.hasIndex(seed)) then
		ps = pool[seed]
		
		if (not inc) then
			return ps.value
		end if
		ps.generation = ps.generation + 1
		val = floor((rnd(ps.value + ps.generation) * (max - min)) + min)
		ps.value = val
		return val
	end if

	seedVal = me.calcSeed(seed)
	val = floor((rnd(seedVal) * (max - min)) + min)
	pool[seed] = me.createPool(seedVal, val)
	return val
end function

Random.seq = function(min, max, seed, amount, keepPool)
	me = self
	index = 0
	result = []

	while index < amount
		temp = me.gen(min, max, seed)
		result.push(temp)
		index = index + 1
	end while

	
	if (keepPool != true) then
		me.pool.remove(seed)
	end if
	return result
end function

Random.get = function(min, max)
	return self.gen(min, max)
end function

print(Random.get(100, 500))
print(Random.seq(100, 500, \\"test\\", 10))",
]
`;

exports[`parse default scripts random.src uglify 1`] = `
Array [
  "I={}
I.pool={}
I.defaultSeed=\\"random\\"
I.createPool=function(Q,val)
return {\\"seed\\":Q,\\"value\\":val,\\"generation\\":0}
end function
I.calcSeed=function(Q)
R=0
S=Q.len
for char in Q
R=R+char.code+S
S=S-1
end for
return R
end function
I.gen=function(V,W,Q,X)
Y=self
J=Y.pool
if (X==null) then
X=true
end if
if (Q==null) then
Q=Y.defaultSeed
end if
if (J.hasIndex(Q)) then
a=J[Q]
if (not X) then
return a.value
end if
a.generation=a.generation+1
val=floor((rnd(a.value+a.generation)*(W-V))+V)
a.value=val
return val
end if
R=Y.calcSeed(Q)
val=floor((rnd(R)*(W-V))+V)
J[Q]=Y.createPool(R,val)
return val
end function
I.seq=function(V,W,Q,d,e)
Y=self
f=0
g=[]
while f<d
h=Y.gen(V,W,Q)
g.push(h)
f=f+1
end while
if (e!=true) then
Y.pool.remove(Q)
end if
return g
end function
I.get=function(V,W)
return self.gen(V,W)
end function
print(I.get(100,500))
print(I.seq(100,500,\\"test\\",10))",
]
`;

exports[`parse default scripts simple-object.src 1`] = `
Array [
  "test={}
test.here=\\"was\\"
test.was=function()
super.here
print(self.here)
end function
print(test.was)",
]
`;

exports[`parse default scripts simple-object.src beautify 1`] = `
Array [
  "test = {}
test.here = \\"was\\"

test.was = function()
	super.here
	print(self.here)
end function

print(test.was)",
]
`;

exports[`parse default scripts simple-object.src uglify 1`] = `
Array [
  "I={}
I.here=\\"was\\"
I.was=function
super.here
print(self.here)
end function
print(I.was)",
]
`;

exports[`parse default scripts slice.src 1`] = `
Array [
  "divideString=function(str,limit)
offset=0
maxLen=str.len
frags=[]
while offset<maxLen
next=offset+limit
frags.push(str[offset:next])
offset=next
end while
return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\",5))",
]
`;

exports[`parse default scripts slice.src beautify 1`] = `
Array [
  "divideString = function(str, limit)
	offset = 0
	maxLen = str.len
	frags = []

	while offset < maxLen
		next = offset + limit
		frags.push(str[offset : next])
		offset = next
	end while

	return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\", 5))",
]
`;

exports[`parse default scripts slice.src uglify 1`] = `
Array [
  "I=function(str,J)
K=0
L=str.len
N=[]
while K<L
O=K+J
N.push(str[K:O])
K=O
end while
return N
end function
print(I(\\"blahhblahhblahhblahhblahhblahhgad\\",5))",
]
`;

exports[`parse default scripts unary.src 1`] = `
Array [
  "test=function()
return null
end function
print(@\\"was\\".split and (false or not false))
print(@(\\"was\\".split and (false or not false)))
print(not \\"was\\".split and (false or not false))
print(not (\\"was\\".split and (false or not false)))
print(-1+2)
print(-(1+2))",
]
`;

exports[`parse default scripts unary.src beautify 1`] = `
Array [
  "test = function()
	return null
end function

print(@\\"was\\".split and (false or not false))
print(@(\\"was\\".split and (false or not false)))
print(not \\"was\\".split and (false or not false))
print(not (\\"was\\".split and (false or not false)))
print(-1 + 2)
print(-(1 + 2))",
]
`;

exports[`parse default scripts unary.src uglify 1`] = `
Array [
  "globals.H=globals
H.L=\\"was\\"
H.K=false
I=function
return null
end function
print(@L.split and (K or not K))
print(@(L.split and (K or not K)))
print(not L.split and (K or not K))
print(not (L.split and (K or not K)))
print(-1+2)
print(-(1+2))",
]
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
Array [
  "globals.H=globals
H.x=\\"||¯|| \\"
H.w=\\"||_|| \\"
H.t=\\"|| || \\"
H.r=\\"||¯ \\"
H.v=\\"||  \\"
H.s=\\"||_ \\"
H.y=\\"||¯\\\\\\\\ \\"
H.u=\\"|| \\"
H.z=\\"  \\"
H._A=\\"<color=#\\"
H.AC=\\">\\"
H.AB=\\"</color>\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end function
MAIN()",
]
`;

exports[`parse default scripts ascii.src uglify 1`] = `
Array [
  "globals.H=globals
H.x=\\"||¯|| \\"
H.w=\\"||_|| \\"
H.t=\\"|| || \\"
H.r=\\"||¯ \\"
H.v=\\"||  \\"
H.s=\\"||_ \\"
H.y=\\"||¯\\\\\\\\ \\"
H.u=\\"|| \\"
H.z=\\"  \\"
H._A=\\"<color=#\\"
H.AC=\\">\\"
H.AB=\\"</color>\\"
C={}
D={}
E=function(b)
if not C.hasIndex(b) then
exit(((\\"Module \\" + b) + \\" cannot be found...\\"))
end if
G=C[b]
return @G(b).exports
end function
F=function()
I={}
J={}
J.a=[x,w,t]
J.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
J.c=[r,v,s]
J.d=[y,\\"|| // \\",\\"||//  \\"]
J.e=[r,\\"||- \\",s]
J.f=[r,s,v]
J.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",w]
J.h=[t,\\"||-|| \\",t]
J.i=[u,u,u]
J.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
J.k=[\\"||  / \\",\\"|| /  \\",y]
J.l=[v,v,s]
J.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
J.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
J.o=[x,t,w]
J.p=[x,w,\\"||    \\"]
J.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
J.r=[x,y,t]
J.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
J.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
J.u=[t,t,w]
J.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
J.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
J.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
J.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
J.z=[\\"¯// \\",\\"//  \\",s]
J[\\"0\\"]=[x,\\"||x|| \\",w]
J[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
J[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
J[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
J[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
J[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
J[\\"6\\"]=[\\"||¯¯  \\",x,w]
J[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
J[\\"8\\"]=[x,\\"||-|| \\",w]
J[\\"9\\"]=[x,\\"  ¯|| \\",\\"  //  \\"]
J[\\" \\"]=[z,z,z]
I.MAP=J
I.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if n.hasIndex(char) then
b[0].push(n[char][0])
b[1].push(n[char][1])
b[2].push(n[char][2])
end if
end for
if (typeof(m) == \\"string\\") then
b[0]=(([((_A + m) + AC)] + b[0]) + [AB])
b[1]=(([((_A + m) + AC)] + b[1]) + [AB])
b[2]=(([((_A + m) + AC)] + b[2]) + [AB])
else if (typeof(m) == \\"list\\") then
b[0]=(([((_A + m[0]) + AC)] + b[0]) + [AB])
b[1]=(([((_A + m[1]) + AC)] + b[1]) + [AB])
b[2]=(([((_A + m[2]) + AC)] + b[2]) + [AB])
end if
return [b[0].join(\\"\\"),b[1].join(\\"\\"),b[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(I.gen(\\"Hallo\\"))
end function
F",
]
`;

exports[`parse default scripts binary-expressions.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
a=(a / b)
a=(a * b)
a=(a - b)
a=(a + b)
(bitwise(\\"<<\\",a,b))
(bitwise(\\">>\\",a,b))
w=(bitwise(\\">>\\",(bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c)))),a))
(bitwise(\\"|\\",a,b))
(bitwise(\\"&\\",a,b))
(bitwise(\\"^\\",a,b))
(a and b)
(a or b)
end function
MAIN()",
]
`;

exports[`parse default scripts binary-expressions.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=(I / J)
I=(I * J)
I=(I - J)
I=(I + J)
(bitwise(\\"<<\\",I,J))
(bitwise(\\">>\\",I,J))
K=(bitwise(\\">>\\",(bitwise(\\">>>\\",I,(bitwise(\\"<<\\",J,L)))),I))
(bitwise(\\"|\\",I,J))
(bitwise(\\"&\\",I,J))
(bitwise(\\"^\\",I,J))
(I and J)
(I or J)
end function
F",
]
`;

exports[`parse default scripts default-args.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=function(arg1=0,arg2=\\"test\\")
print(arg1)
print(arg2)
end function
test()
test(\\"foo\\",false)
end function
MAIN()",
]
`;

exports[`parse default scripts default-args.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=function(J=0,K=\\"test\\")
print(J)
print(K)
end function
I
I(\\"foo\\",false)
end function
F",
]
`;

exports[`parse default scripts greybel-utils.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MODULES[\\"B\\"]=function(r)
module={}
if EXPORTED.hasIndex(r) then
module=EXPORTED[r]
end if
if not module.hasIndex(\\"exports\\") then
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
end if
EXPORTED[r]=module
return EXPORTED[r]
end function
MAIN=function()
foo = __REQUIRE(\\"B\\")
AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))
null
//debugger
end function
MAIN()",
]
`;

exports[`parse default scripts greybel-utils.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(c)
if not C.hasIndex(c) then
exit(((\\"Module \\" + c) + \\" cannot be found...\\"))
end if
G=C[c]
return @G(c).exports
end function
C[\\"B\\"]=function(c)
G={}
if D.hasIndex(c) then
G=D[c]
end if
if not G.hasIndex(\\"exports\\") then
J={}
K={}
K.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
K.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
K.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
K.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
K.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
K.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
K.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
K.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
K.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
K.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
K.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
K.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
K.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
K.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
K.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
K.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
K.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
K.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
K.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
K.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
K.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
K.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
K.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
K.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
K.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
K.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
K[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
K[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
K[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
K[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
K[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
K[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
K[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
K[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
K[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
K[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
K[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
J.MAP=K
J.gen=function(str,n)
c=[[],[],[]]
o=self.MAP
for char in str
char=char.lower
if o.hasIndex(char) then
c[0].push(o[char][0])
c[1].push(o[char][1])
c[2].push(o[char][2])
end if
end for
if (typeof(n) == \\"string\\") then
c[0]=(([((\\"<color=#\\" + n) + \\">\\")] + c[0]) + [\\"</color>\\"])
c[1]=(([((\\"<color=#\\" + n) + \\">\\")] + c[1]) + [\\"</color>\\"])
c[2]=(([((\\"<color=#\\" + n) + \\">\\")] + c[2]) + [\\"</color>\\"])
else if (typeof(n) == \\"list\\") then
c[0]=(([((\\"<color=#\\" + n[0]) + \\">\\")] + c[0]) + [\\"</color>\\"])
c[1]=(([((\\"<color=#\\" + n[1]) + \\">\\")] + c[1]) + [\\"</color>\\"])
c[2]=(([((\\"<color=#\\" + n[2]) + \\">\\")] + c[2]) + [\\"</color>\\"])
end if
return [c[0].join(\\"\\"),c[1].join(\\"\\"),c[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))
end if
D[c]=G
return D[c]
end function
F=function()
I=E(\\"B\\")
J={}
K={}
K.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
K.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
K.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
K.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
K.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
K.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
K.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
K.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
K.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
K.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
K.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
K.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
K.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
K.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
K.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
K.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
K.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
K.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
K.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
K.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
K.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
K.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
K.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
K.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
K.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
K.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
K[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
K[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
K[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
K[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
K[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
K[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
K[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
K[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
K[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
K[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
K[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
J.MAP=K
J.gen=function(str,n)
c=[[],[],[]]
o=self.MAP
for char in str
char=char.lower
if o.hasIndex(char) then
c[0].push(o[char][0])
c[1].push(o[char][1])
c[2].push(o[char][2])
end if
end for
if (typeof(n) == \\"string\\") then
c[0]=(([((\\"<color=#\\" + n) + \\">\\")] + c[0]) + [\\"</color>\\"])
c[1]=(([((\\"<color=#\\" + n) + \\">\\")] + c[1]) + [\\"</color>\\"])
c[2]=(([((\\"<color=#\\" + n) + \\">\\")] + c[2]) + [\\"</color>\\"])
else if (typeof(n) == \\"list\\") then
c[0]=(([((\\"<color=#\\" + n[0]) + \\">\\")] + c[0]) + [\\"</color>\\"])
c[1]=(([((\\"<color=#\\" + n[1]) + \\">\\")] + c[1]) + [\\"</color>\\"])
c[2]=(([((\\"<color=#\\" + n[2]) + \\">\\")] + c[2]) + [\\"</color>\\"])
end if
return [c[0].join(\\"\\"),c[1].join(\\"\\"),c[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))
null
//debugger
end function
F",
]
`;

exports[`parse default scripts has-index.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
globals.test=\\"was\\"
locals.foo=\\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))
end function
MAIN()",
]
`;

exports[`parse default scripts has-index.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
H.I=\\"was\\"
locals.J=\\"moo\\"
print(H.hasIndex(\\"I\\"))
print(locals.hasIndex(\\"J\\"))
end function
F",
]
`;

exports[`parse default scripts import-code.src 1`] = `
Array [
  "globals.H=globals
H.x=\\"||¯|| \\"
H.w=\\"||_|| \\"
H.t=\\"|| || \\"
H.r=\\"||¯ \\"
H.v=\\"||  \\"
H.s=\\"||_ \\"
H.y=\\"||¯\\\\\\\\ \\"
H.u=\\"|| \\"
H.z=\\"  \\"
H._A=\\"<color=#\\"
H.AC=\\">\\"
H.AB=\\"</color>\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
import_code(\\"/some/path\\")
print(123)
end function
MAIN()",
  "AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts import-code.src uglify 1`] = `
Array [
  "globals.H=globals
H.x=\\"||¯|| \\"
H.w=\\"||_|| \\"
H.t=\\"|| || \\"
H.r=\\"||¯ \\"
H.v=\\"||  \\"
H.s=\\"||_ \\"
H.y=\\"||¯\\\\\\\\ \\"
H.u=\\"|| \\"
H.z=\\"  \\"
H._A=\\"<color=#\\"
H.AC=\\">\\"
H.AB=\\"</color>\\"
C={}
D={}
E=function(b)
if not C.hasIndex(b) then
exit(((\\"Module \\" + b) + \\" cannot be found...\\"))
end if
G=C[b]
return @G(b).exports
end function
F=function()
import_code(\\"/some/path\\")
print(123)
end function
F",
  "I={}
J={}
J.a=[x,w,t]
J.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
J.c=[r,v,s]
J.d=[y,\\"|| // \\",\\"||//  \\"]
J.e=[r,\\"||- \\",s]
J.f=[r,s,v]
J.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",w]
J.h=[t,\\"||-|| \\",t]
J.i=[u,u,u]
J.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
J.k=[\\"||  / \\",\\"|| /  \\",y]
J.l=[v,v,s]
J.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
J.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
J.o=[x,t,w]
J.p=[x,w,\\"||    \\"]
J.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
J.r=[x,y,t]
J.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
J.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
J.u=[t,t,w]
J.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
J.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
J.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
J.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
J.z=[\\"¯// \\",\\"//  \\",s]
J[\\"0\\"]=[x,\\"||x|| \\",w]
J[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
J[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
J[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
J[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
J[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
J[\\"6\\"]=[\\"||¯¯  \\",x,w]
J[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
J[\\"8\\"]=[x,\\"||-|| \\",w]
J[\\"9\\"]=[x,\\"  ¯|| \\",\\"  //  \\"]
J[\\" \\"]=[z,z,z]
I.MAP=J
I.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if n.hasIndex(char) then
b[0].push(n[char][0])
b[1].push(n[char][1])
b[2].push(n[char][2])
end if
end for
if (typeof(m) == \\"string\\") then
b[0]=(([((_A + m) + AC)] + b[0]) + [AB])
b[1]=(([((_A + m) + AC)] + b[1]) + [AB])
b[2]=(([((_A + m) + AC)] + b[2]) + [AB])
else if (typeof(m) == \\"list\\") then
b[0]=(([((_A + m[0]) + AC)] + b[0]) + [AB])
b[1]=(([((_A + m[1]) + AC)] + b[1]) + [AB])
b[2]=(([((_A + m[2]) + AC)] + b[2]) + [AB])
end if
return [b[0].join(\\"\\"),b[1].join(\\"\\"),b[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(I.gen(\\"Hallo\\"))",
]
`;

exports[`parse default scripts negation.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=(((-1 + 2) + -2) + +3)
foo=[-1,(-2 + 4),((-2 + -4) + +6)]
print(test)
print(foo)
end function
MAIN()",
]
`;

exports[`parse default scripts negation.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=(((-1 + 2) + -2) + +3)
J=[-1,(-2 + 4),((-2 + -4) + +6)]
print(I)
print(J)
end function
F",
]
`;

exports[`parse default scripts obj-init.src 1`] = `
Array [
  "globals.H=globals
H.P=\\"123\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
valueOfIdentifier=\\"foo\\"
myObject={\\"test\\":{\\"another\\":\\"123\\"},\\"value\\":\\"123\\",\\"idtf\\":valueOfIdentifier}
print([myObject.test.another,myObject.value,myObject.idtf])
myList=[{\\"another\\":\\"123\\"},\\"123\\",valueOfIdentifier]
print(myList)
end function
MAIN()",
]
`;

exports[`parse default scripts obj-init.src uglify 1`] = `
Array [
  "globals.H=globals
H.P=\\"123\\"
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=\\"foo\\"
J={\\"test\\":{\\"another\\":P},\\"value\\":P,\\"idtf\\":I}
print([J.test.another,J.value,J.idtf])
O=[{\\"another\\":P},P,I]
print(O)
end function
F",
]
`;

exports[`parse default scripts optimize.src 1`] = `
Array [
  "globals.H=globals
H.O=\\"xxxxxxxxxx\\"
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=function(abc)
print(abc)
end function
superlangername=function(abc)
print(abc)
end function
superlangername3=function(abc)
print(abc)
end function
superlangername4=function(abc)
print(abc)
end function
superlangername5=function(abc)
print(abc)
end function
test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")
end function
MAIN()",
]
`;

exports[`parse default scripts optimize.src uglify 1`] = `
Array [
  "globals.H=globals
H.O=\\"xxxxxxxxxx\\"
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=function(J)
print(J)
end function
K=function(J)
print(J)
end function
L=function(J)
print(J)
end function
M=function(J)
print(J)
end function
N=function(J)
print(J)
end function
I(O)
K(O)
M(O)
K(O)
N(O)
L(O)
end function
F",
]
`;

exports[`parse default scripts password-generator.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=((PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper) + PasswordGenerator.NUMBER_CHARACTERS)
PasswordGenerator.constructor=function()
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function(i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i == null) then i=(currentCharBuffer.len - 1)
p=currentCharBuffer[i]
p=(p + 1)
currentCharBuffer[i]=p
if (p == maxBufferSize) then
currentCharBuffer[i]=0
if (i == 0) then
currentCharBuffer.push(0)
else
me.increaseBuffer((i - 1))
end if
end if
end function
PasswordGenerator.gen=function()
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while (index < currentCharBuffer.len)
pointer=currentCharBuffer[index]
password=(password + generatorCharacters[pointer])
if (index == (currentCharBuffer.len - 1)) then self.increaseBuffer()
index=(index + 1)
end while
if (currentCharBuffer.len > me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor()
index=0
max=10
result=[]
while (index < max)
result.push(pgen.gen())
index=(index + 1)
end while
print(result)
end function
MAIN()",
]
`;

exports[`parse default scripts password-generator.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I={}
I.MAX_PASSWORD_LENGTH=15
I.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
I.NUMBER_CHARACTERS=\\"0123456789\\"
I.ALPHA_NUMERIC=((I.ALPHABETIC_CHARACTERS + I.ALPHABETIC_CHARACTERS.upper) + I.NUMBER_CHARACTERS)
I.constructor=function()
P=self
P.buffer=[0]
P.characters=P.ALPHA_NUMERIC
return P
end function
I.increaseBuffer=function(T)
P=self
U=P.buffer
V=P.characters.len
if (T == null) then T=(U.len - 1)
X=U[T]
X=(X + 1)
U[T]=X
if (X == V) then
U[T]=0
if (T == 0) then
U.push(0)
else
P.increaseBuffer((T - 1))
end if
end if
end function
I.gen=function()
P=self
U=P.buffer
a=P.characters
b=\\"\\"
c=0
while (c < U.len)
d=U[c]
b=(b + a[d])
if (c == (U.len - 1)) then self.increaseBuffer
c=(c + 1)
end while
if (U.len > P.MAX_PASSWORD_LENGTH) then
return null
end if
return b
end function
e=(new I).constructor
c=0
f=10
g=[]
while (c < f)
g.push(e.gen)
c=(c + 1)
end while
print(g)
end function
F",
]
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
Array [
  "globals.H=globals
H.Ad=1
H.Ab=null
H.Ac=63
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
String={}
String.constructor=function(str)
self.str=str
return self
end function
String.parse=function(values)
result=self.str
index=0
maxIndex=values.len
while (index < maxIndex)
result=result.replace((\\"$\\" + index),values[index])
index=(index + 1)
end while
return (new self).constructor(result)
end function
String.startsWith=function(str)
return (self.str.indexOf(str) == 0)
end function
String.substr=function(startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function(str)
return self.str.indexOf(str)
end function
String.replace=function(str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function()
return self.str
end function
String.length=function()
return self.str.len
end function
String.split=function(seperator)
return self.str.split(seperator)
end function
String.trim=function(seperator)
return (new self).constructor(self.str.trim())
end function
Error={}
Error.String=String
Error.constructor=function(message,values)
m=self
m.message=message
if (values != null) then
m.message=(new m.String).constructor(message).parse(values).toString()
end if
return m
end function
Error.throw=function()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret=\\"test123\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function(defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn == null) then me.hashFn=@md5
if (charset == null) then me.table=me.defaultCharset
if (me.table.len != 64) then (new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw()
return me
end function
Crypto.getHash=function(pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function(str,pw)
me=self
if (pw == null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=(str.len % 3)
max=(str.len - padding)
get=function(v)
if not me.table.hasIndex(v) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw()
end if
return me.table[v]
end function
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function(a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),16)
b=LSHIFT((str[(position + 1)].code + m),8)
c=(str[(position + 2)].code + m)
buffer=((a + b) + c)
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=(position + 3)
end while
if (padding == 2) then
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),8)
b=(str[(position + 1)].code + m)
buffer=(a + b)
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding == 1) then
m=hash[((position % hash.len) - 1)]
buffer=(str[position].code + m)
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function(str,pw)
me=self
if (pw == null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=(bitCounter + 1)
if (currentBit % 4) then
bitStorage=((bitStorage * 64) + buffer)
else
bitStorage=buffer
end if
if (currentBit % 4) then
expectedHashIndex=(((floor((hashPointer / 3)) * 3) % hashLength) - 1)
if not hash.hasIndex(expectedHashIndex) then break
m=hash[expectedHashIndex]
operation=AND((-2 * bitCounter),6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation != 0) then
charCode=(operation - m)
if (charCode > me.maxCharCode) then break
output.push(char(charCode))
end if
hashPointer=(hashPointer + 1)
end if
position=(position + 1)
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
pwd=\\"abcde\\"
foo=test.encrypt(pwd)
decrypted=test.decrypt(foo)
print(foo)
print(decrypted)
end function
MAIN()",
]
`;

exports[`parse default scripts pseudo-crypto.src uglify 1`] = `
Array [
  "globals.H=globals
H.Ad=1
H.Ab=null
H.Ac=63
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I={}
I.constructor=function(str)
self.str=str
return self
end function
I.parse=function(L)
M=self.str
N=0
O=L.len
while (N < O)
M=M.replace((\\"$\\" + N),L[N])
N=(N + Ad)
end while
return (new self).constructor(M)
end function
I.startsWith=function(str)
return (self.str.indexOf(str) == 0)
end function
I.substr=function(U,V)
return (new self).constructor(slice(self.str,U,V))
end function
I.indexOf=function(str)
return self.str.indexOf(str)
end function
I.replace=function(str,W)
return (new self).constructor(self.str.replace(str,W))
end function
I.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
I.toString=function()
return self.str
end function
I.length=function()
return self.str.len
end function
I.split=function(AI)
return self.str.split(AI)
end function
I.trim=function(AI)
return (new self).constructor(self.str.trim)
end function
d={}
d.String=I
d.constructor=function(e,L)
f=self
f.message=e
if (L != Ab) then
f.message=(new f.String).constructor(e).parse(L).toString
end if
return f
end function
d.throw=function()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
h={}
h.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
h.defaultSecret=\\"test123\\"
h.maxCharCode=55295
h.Error=d
h.constructor=function(j,l,m)
n=self
n.defaultSecret=j
n.table=m
n.hashFn=@l
if (@l == Ab) then n.hashFn=@md5
if (m == Ab) then n.table=n.defaultCharset
if (n.table.len != 64) then (new n.Error).constructor(\\"Invalid charset $0...\\",[n.table]).throw
return n
end function
h.getHash=function(q)
n=self
hash=[]
r=n.hashFn(q)
for char in r
hash.push(char.code)
end for
hash.reverse
return hash
end function
h.encrypt=function(str,q)
n=self
if (q == Ab) then q=n.defaultSecret
hash=n.getHash(q)
w=0
x=[]
y=0
z=(str.len % 3)
_A=(str.len - z)
AB=function(AC)
if not n.table.hasIndex(AC) then
(new n.Error).constructor(\\"Invalid index $0...\\",[AC]).throw
end if
return n.table[AC]
end function
AE=function(AF,AH)
return bitwise(\\"&\\",AF,AH)
end function
AJ=function(AF,AH)
return bitwise(\\"<<\\",AF,AH)
end function
AK=function(AF,AH)
return bitwise(\\">>\\",AF,AH)
end function
while (y < _A)
f=hash[((y % hash.len) - Ad)]
AF=AJ((str[y].code + f),16)
AH=AJ((str[(y + Ad)].code + f),8)
AL=(str[(y + 2)].code + f)
AN=((AF + AH) + AL)
x.push(AB(AE(AK(AN,18),Ac)))
x.push(AB(AE(AK(AN,12),Ac)))
x.push(AB(AE(AK(AN,6),Ac)))
x.push(AB(AE(AN,Ac)))
y=(y + 3)
end while
if (z == 2) then
f=hash[((y % hash.len) - Ad)]
AF=AJ((str[y].code + f),8)
AH=(str[(y + Ad)].code + f)
AN=(AF + AH)
x.push(AB(AK(AN,10)))
x.push(AB(AE(AK(AN,4),Ac)))
x.push(AB(AE(AJ(AN,2),Ac)))
x.push(\\"=\\")
else if (z == Ad) then
f=hash[((y % hash.len) - Ad)]
AN=(str[y].code + f)
x.push(AB(AK(AN,2)))
x.push(AB(AE(AJ(AN,4),Ac)))
x.push(\\"==\\")
end if
return x.join(\\"\\")
end function
h.decrypt=function(str,q)
n=self
if (q == Ab) then q=n.defaultSecret
hash=n.getHash(q)
w=0
AQ=hash.len
x=[]
AR=0
AS=0
y=0
w=0
_A=str.len
AE=function(AF,AH)
return bitwise(\\"&\\",AF,AH)
end function
AK=function(AF,AH)
return bitwise(\\">>\\",AF,AH)
end function
while (y < _A)
AN=n.table.indexOf(str[y])
AT=AR
AR=(AR + Ad)
if (AT % 4) then
AS=((AS * 64) + AN)
else
AS=AN
end if
if (AT % 4) then
AU=(((floor((w / 3)) * 3) % AQ) - Ad)
if not hash.hasIndex(AU) then break
f=hash[AU]
AV=AE((-2 * AR),6)
AV=AK(AS,AV)
AV=AE(255,AV)
if (AV != 0) then
AW=(AV - f)
if (AW > n.maxCharCode) then break
x.push(char(AW))
end if
w=(w + Ad)
end if
y=(y + Ad)
end while
return x.join(\\"\\")
end function
AX=(new h).constructor(\\"test\\")
AY=\\"abcde\\"
AZ=AX.encrypt(AY)
Aa=AX.decrypt(AZ)
print(AZ)
print(Aa)
end function
F",
]
`;

exports[`parse default scripts random.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function(seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function(seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=((seedVal + char.code) + pos)
pos=(pos - 1)
end for
return seedVal
end function
Random.gen=function(min,max,seed,inc)
me=self
pool=me.pool
if (inc == null) then inc=true
if (seed == null) then seed=me.defaultSeed
if pool.hasIndex(seed) then
ps=pool[seed]
if not inc then return ps.value
ps.generation=(ps.generation + 1)
val=floor(((rnd((ps.value + ps.generation)) * (max - min)) + min))
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor(((rnd(seedVal) * (max - min)) + min))
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function(min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while (index < amount)
temp=me.gen(min,max,seed)
result.push(temp)
index=(index + 1)
end while
if (keepPool != true) then me.pool.remove(seed)
return result
end function
Random.get=function(min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))
end function
MAIN()",
]
`;

exports[`parse default scripts random.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I={}
I.pool={}
I.defaultSeed=\\"random\\"
I.createPool=function(M,N)
return {\\"seed\\":M,\\"value\\":N,\\"generation\\":0}
end function
I.calcSeed=function(M)
P=0
Q=M.len
for char in M
P=((P + char.code) + Q)
Q=(Q - 1)
end for
return P
end function
I.gen=function(U,V,M,W)
X=self
J=X.pool
if (W == null) then W=true
if (M == null) then M=X.defaultSeed
if J.hasIndex(M) then
Y=J[M]
if not W then return Y.value
Y.generation=(Y.generation + 1)
N=floor(((rnd((Y.value + Y.generation)) * (V - U)) + U))
Y.value=N
return N
end if
P=X.calcSeed(M)
N=floor(((rnd(P) * (V - U)) + U))
J[M]=X.createPool(P,N)
return N
end function
I.seq=function(U,V,M,c,d)
X=self
e=0
f=[]
while (e < c)
g=X.gen(U,V,M)
f.push(g)
e=(e + 1)
end while
if (d != true) then X.pool.remove(M)
return f
end function
I.get=function(U,V)
return self.gen(U,V)
end function
print(I.get(100,500))
print(I.seq(100,500,\\"test\\",10))
end function
F",
]
`;

exports[`parse default scripts simple-object.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test={}
test.here=\\"was\\"
test.was=function()
print(self.here)
end function
print(test.was())
end function
MAIN()",
]
`;

exports[`parse default scripts simple-object.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I={}
I.here=\\"was\\"
I.was=function()
print(self.here)
end function
print(I.was)
end function
F",
]
`;

exports[`parse default scripts slice.src 1`] = `
Array [
  "globals.H=globals
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
divideString=function(str,limit)
offset=0
maxLen=str.len
frags=[]
while (offset < maxLen)
next=(offset + limit)
frags.push(str[offset:next])
offset=next
end while
return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\",5))
end function
MAIN()",
]
`;

exports[`parse default scripts slice.src uglify 1`] = `
Array [
  "globals.H=globals
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=function(str,J)
K=0
L=str.len
N=[]
while (K < L)
O=(K + J)
N.push(str[K:O])
K=O
end while
return N
end function
print(I(\\"blahhblahhblahhblahhblahhblahhgad\\",5))
end function
F",
]
`;

exports[`parse default scripts unary.src 1`] = `
Array [
  "globals.H=globals
H.L=\\"was\\"
H.K=false
MODULES={}
EXPORTED={}
__REQUIRE=function(r)
if not MODULES.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
module=MODULES[r]
return @module(r).exports
end function
MAIN=function()
test=function()
return null
end function
print((@\\"was\\".split and (false or not false)))
print(@(\\"was\\".split and (false or not false)))
print((not \\"was\\".split and (false or not false)))
print(not (\\"was\\".split and (false or not false)))
print((-1 + 2))
print(-(1 + 2))
end function
MAIN()",
]
`;

exports[`parse default scripts unary.src uglify 1`] = `
Array [
  "globals.H=globals
H.L=\\"was\\"
H.K=false
C={}
D={}
E=function(r)
if not C.hasIndex(r) then
exit(((\\"Module \\" + r) + \\" cannot be found...\\"))
end if
G=C[r]
return @G(r).exports
end function
F=function()
I=function()
return null
end function
print((@L.split and (K or not K)))
print(@(L.split and (K or not K)))
print((not L.split and (K or not K)))
print(not (L.split and (K or not K)))
print((-1 + 2))
print(-(1 + 2))
end function
F",
]
`;

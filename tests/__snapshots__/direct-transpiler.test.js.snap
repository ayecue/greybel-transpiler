// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts ascii.src beautify 1`] = `
"AsciiGen = {}
map = {}
map.a = [\\"||¯|| \\", \\"||_|| \\", \\"|| || \\"]
map.b = [\\"||¯/ \\", \\"|| \\\\ \\", \\"||_/ \\"]
map.c = [\\"||¯ \\", \\"||  \\", \\"||_ \\"]
map.d = [\\"||¯\\\\\\\\ \\", \\"|| // \\", \\"||//  \\"]
map.e = [\\"||¯ \\", \\"||- \\", \\"||_ \\"]
map.f = [\\"||¯ \\", \\"||_ \\", \\"||  \\"]
map.g = [\\"||¯¯  \\", \\"|| \\\\\\\\ \\", \\"||_|| \\"]
map.h = [\\"|| || \\", \\"||-|| \\", \\"|| || \\"]
map.i = [\\"|| \\", \\"|| \\", \\"|| \\"]
map.j = [\\" ¯||¯ \\", \\"  ||  \\", \\"|_||  \\"]
map.k = [\\"||  / \\", \\"|| /  \\", \\"||¯\\\\\\\\ \\"]
map.l = [\\"||  \\", \\"||  \\", \\"||_ \\"]
map.m = [\\"||\\\\\\\\/|| \\", \\"||   || \\", \\"||   || \\"]
map.n = [\\"||\\\\\\\\ || \\", \\"|| \\\\\\\\|| \\", \\"||  \\\\|| \\"]
map.o = [\\"||¯|| \\", \\"|| || \\", \\"||_|| \\"]
map.p = [\\"||¯|| \\", \\"||_|| \\", \\"||    \\"]
map.q = [\\"||¯||  \\", \\"|| ||  \\", \\"||_||¬ \\"]
map.r = [\\"||¯|| \\", \\"||¯\\\\\\\\ \\", \\"|| || \\"]
map.s = [\\"||¯¯ \\", \\" \\\\\\\\  \\", \\"__|| \\"]
map.t = [\\"¯||¯ \\", \\" ||  \\", \\" ||  \\"]
map.u = [\\"|| || \\", \\"|| || \\", \\"||_|| \\"]
map.v = [\\"\\\\\\\\ || \\", \\" \\\\\\\\|| \\", \\"  \\\\\\\\| \\"]
map.w = [\\"\\\\\\\\ |\\\\\\\\ | \\", \\" \\\\\\\\| \\\\\\\\| \\", \\"  \\\\\\\\  \\\\\\\\ \\"]
map.x = [\\"\\\\\\\\  / \\", \\" \\\\\\\\/  \\", \\" //\\\\  \\"]
map.y = [\\"\\\\\\\\  // \\", \\" \\\\\\\\//  \\", \\"  ||   \\"]
map.z = [\\"¯// \\", \\"//  \\", \\"||_ \\"]
map[\\"0\\"] = [\\"||¯|| \\", \\"||x|| \\", \\"||_|| \\"]
map[\\"1\\"] = [\\"'|| \\", \\" || \\", \\" || \\"]
map[\\"2\\"] = [\\"¯¯|| \\", \\"||¯  \\", \\"||_  \\"]
map[\\"3\\"] = [\\"¯|| \\", \\"-|| \\", \\"_|| \\"]
map[\\"4\\"] = [\\" /|| \\", \\"/_|| \\", \\"  || \\"]
map[\\"5\\"] = [\\"||¯¯ \\", \\" ¯|| \\", \\" _|| \\"]
map[\\"6\\"] = [\\"||¯¯  \\", \\"||¯|| \\", \\"||_|| \\"]
map[\\"7\\"] = [\\"¯¯// \\", \\" //  \\", \\"//   \\"]
map[\\"8\\"] = [\\"||¯|| \\", \\"||-|| \\", \\"||_|| \\"]
map[\\"9\\"] = [\\"||¯|| \\", \\"  ¯|| \\", \\"  //  \\"]
map[\\" \\"] = [\\"  \\", \\"  \\", \\"  \\"]
AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [[], [], []]
	signs = self.MAP

	for char in str
		char = char.lower

		if signs.hasIndex(char) then
			r[0].push(signs[char][0])
			r[1].push(signs[char][1])
			r[2].push(signs[char][2])
		end if
	end for

	if (typeof(colors) == \\"string\\") then
		r[0] = (([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
		r[1] = (([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
		r[2] = (([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
	else if (typeof(colors) == \\"list\\") then
		r[0] = (([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
		r[1] = (([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
		r[2] = (([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
	end if

	return [r[0].join(\\"\\"), r[1].join(\\"\\"), r[2].join(\\"\\")].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts ascii.src uglify 1`] = `
"globals.H=globals
H.v=\\"||¯|| \\"
H.u=\\"||_|| \\"
H.r=\\"|| || \\"
H.p=\\"||¯ \\"
H.t=\\"||  \\"
H.q=\\"||_ \\"
H.w=\\"||¯\\\\\\\\ \\"
H.s=\\"|| \\"
H.x=\\"  \\"
H.y=\\"<color=#\\"
H._=\\">\\"
H.z=\\"</color>\\"
I={}
J={}
J.a=[v,u,r]
J.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
J.c=[p,t,q]
J.d=[w,\\"|| // \\",\\"||//  \\"]
J.e=[p,\\"||- \\",q]
J.f=[p,q,t]
J.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",u]
J.h=[r,\\"||-|| \\",r]
J.i=[s,s,s]
J.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
J.k=[\\"||  / \\",\\"|| /  \\",w]
J.l=[t,t,q]
J.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
J.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
J.o=[v,r,u]
J.p=[v,u,\\"||    \\"]
J.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
J.r=[v,w,r]
J.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
J.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
J.u=[r,r,u]
J.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
J.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
J.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
J.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
J.z=[\\"¯// \\",\\"//  \\",q]
J[\\"0\\"]=[v,\\"||x|| \\",u]
J[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
J[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
J[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
J[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
J[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
J[\\"6\\"]=[\\"||¯¯  \\",v,u]
J[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
J[\\"8\\"]=[v,\\"||-|| \\",u]
J[\\"9\\"]=[v,\\"  ¯|| \\",\\"  //  \\"]
J[\\" \\"]=[x,x,x]
I.MAP=J
I.gen=function(str,m)
b=[[],[],[]]
n=self.MAP
for char in str
char=char.lower
if n.hasIndex(char) then
b[0].push(n[char][0])
b[1].push(n[char][1])
b[2].push(n[char][2])
end if
end for
if (typeof(m) == \\"string\\") then
b[0]=(([((y + m) + _)] + b[0]) + [z])
b[1]=(([((y + m) + _)] + b[1]) + [z])
b[2]=(([((y + m) + _)] + b[2]) + [z])
else if (typeof(m) == \\"list\\") then
b[0]=(([((y + m[0]) + _)] + b[0]) + [z])
b[1]=(([((y + m[1]) + _)] + b[1]) + [z])
b[2]=(([((y + m[2]) + _)] + b[2]) + [z])
end if
return [b[0].join(\\"\\"),b[1].join(\\"\\"),b[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(I.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"a=(a / b)
a=(a * b)
a=(a - b)
a=(a + b)
(bitwise(\\"<<\\",a,b))
(bitwise(\\">>\\",a,b))
w=(bitwise(\\">>\\",(bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c)))),a))
(bitwise(\\"|\\",a,b))
(bitwise(\\"&\\",a,b))
(bitwise(\\"^\\",a,b))
(a and b)
(a or b)"
`;

exports[`parse default scripts binary-expressions.src beautify 1`] = `
"a = (a / b)
a = (a * b)
a = (a - b)
a = (a + b)
(bitwise(\\"<<\\", a, b))
(bitwise(\\">>\\", a, b))
w = (bitwise(\\">>\\", (bitwise(\\">>>\\", a, (bitwise(\\"<<\\", b, c)))), a))
(bitwise(\\"|\\", a, b))
(bitwise(\\"&\\", a, b))
(bitwise(\\"^\\", a, b))
(a and b)
(a or b)"
`;

exports[`parse default scripts binary-expressions.src uglify 1`] = `
"globals.H=globals
I=(I / J)
I=(I * J)
I=(I - J)
I=(I + J)
(bitwise(\\"<<\\",I,J))
(bitwise(\\">>\\",I,J))
K=(bitwise(\\">>\\",(bitwise(\\">>>\\",I,(bitwise(\\"<<\\",J,L)))),I))
(bitwise(\\"|\\",I,J))
(bitwise(\\"&\\",I,J))
(bitwise(\\"^\\",I,J))
(I and J)
(I or J)"
`;

exports[`parse default scripts default-args.src 1`] = `
"test=function(arg1=0,arg2=\\"test\\")
print(arg1)
print(arg2)
end function
test()
test(\\"foo\\",false)"
`;

exports[`parse default scripts default-args.src beautify 1`] = `
"test = function(arg1 = 0, arg2 = \\"test\\")
	print(arg1)
	print(arg2)
end function

test()
test(\\"foo\\", false)"
`;

exports[`parse default scripts default-args.src uglify 1`] = `
"globals.H=globals
I=function(J=0,K=\\"test\\")
print(J)
print(K)
end function
I
I(\\"foo\\",false)"
`;

exports[`parse default scripts envar.src 1`] = `
"myvar=\\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts envar.src beautify 1`] = `
"myvar = \\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts envar.src uglify 1`] = `
"globals.H=globals
I=\\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts greybel-utils.src 1`] = `
"foo = __REQUIRE(\\"undefined\\")
\\"true\\"
//debugger"
`;

exports[`parse default scripts greybel-utils.src beautify 1`] = `
"foo = __REQUIRE(\\"undefined\\")
\\"true\\"
//debugger"
`;

exports[`parse default scripts greybel-utils.src uglify 1`] = `
"globals.H=globals
I=E(\\"undefined\\")
\\"true\\"
//debugger"
`;

exports[`parse default scripts has-index.src 1`] = `
"globals.test=\\"was\\"
locals.foo=\\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))"
`;

exports[`parse default scripts has-index.src beautify 1`] = `
"globals.test = \\"was\\"
locals.foo = \\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))"
`;

exports[`parse default scripts has-index.src uglify 1`] = `
"globals.H=globals
H.I=\\"was\\"
locals.J=\\"moo\\"
print(H.hasIndex(\\"I\\"))
print(locals.hasIndex(\\"J\\"))"
`;

exports[`parse default scripts if-scuffed.src 1`] = `
"if true then
print(\\"true - 1\\")
end if
if true then
print(\\"true - 2\\")
else if true then
print(\\"true - 2\\")
end if
if true then
print(\\"true - 3\\")
else if true then
print(\\"true - 3\\")
else if true then
print(\\"true - 3\\")
end if
if true then
print(\\"true - 4\\")
else if true then
print(\\"true - 4\\")
else if true then
print(\\"true - 4\\")
else
print(\\"true - 4\\")
end if
if true then
print(\\"true - 5\\")
else if true then
print(\\"true - 5\\")
else
print(\\"true - 5\\")
end if
if true then
print(\\"true - 6\\")
else
print(\\"true - 6\\")
end if"
`;

exports[`parse default scripts if-scuffed.src beautify 1`] = `
"
if true then
	print(\\"true - 1\\")
end if

if true then
	print(\\"true - 2\\")
else if true then
	print(\\"true - 2\\")
end if

if true then
	print(\\"true - 3\\")
else if true then
	print(\\"true - 3\\")
else if true then
	print(\\"true - 3\\")
end if

if true then
	print(\\"true - 4\\")
else if true then
	print(\\"true - 4\\")
else if true then
	print(\\"true - 4\\")
else
	print(\\"true - 4\\")
end if

if true then
	print(\\"true - 5\\")
else if true then
	print(\\"true - 5\\")
else
	print(\\"true - 5\\")
end if

if true then
	print(\\"true - 6\\")
else
	print(\\"true - 6\\")
end if"
`;

exports[`parse default scripts if-scuffed.src uglify 1`] = `
"globals.H=globals
H.I=true
H.J=\\"true - 3\\"
H.K=\\"true - 4\\"
H.L=\\"true - 5\\"
if I then
print(\\"true - 1\\")
end if
if I then
print(\\"true - 2\\")
else if I then
print(\\"true - 2\\")
end if
if I then
print(J)
else if I then
print(J)
else if I then
print(J)
end if
if I then
print(K)
else if I then
print(K)
else if I then
print(K)
else
print(K)
end if
if I then
print(L)
else if I then
print(L)
else
print(L)
end if
if I then
print(\\"true - 6\\")
else
print(\\"true - 6\\")
end if"
`;

exports[`parse default scripts import-code.src 1`] = `
"import_code(\\"/some/path\\")
print(123)"
`;

exports[`parse default scripts import-code.src beautify 1`] = `
"import_code(\\"/some/path\\")
print(123)"
`;

exports[`parse default scripts import-code.src uglify 1`] = `
"globals.H=globals
import_code(\\"/some/path\\")
print(123)"
`;

exports[`parse default scripts map.src 1`] = `
"test={{\\"myTest\\":0,1:2}:true}
test2={[12,14]:true}
test3={test:234}
test4={true:\\"foo\\"}
test5={123:\\"bar\\"}"
`;

exports[`parse default scripts map.src beautify 1`] = `
"test = {{\\"myTest\\": 0, 1: 2}: true}
test2 = {[12, 14]: true}
test3 = {test: 234}
test4 = {true: \\"foo\\"}
test5 = {123: \\"bar\\"}"
`;

exports[`parse default scripts map.src uglify 1`] = `
"globals.H=globals
H.N=true
I={{\\"myTest\\":0,1:2}:N}
J={[12,14]:N}
K={I:234}
L={N:\\"foo\\"}
M={123:\\"bar\\"}"
`;

exports[`parse default scripts negation.src 1`] = `
"test=(((-1 + 2) + -2) + +3)
foo=[-1,(-2 + 4),((-2 + -4) + +6)]
print(test)
print(foo)"
`;

exports[`parse default scripts negation.src beautify 1`] = `
"test = (((-1 + 2) + -2) + +3)
foo = [-1, (-2 + 4), ((-2 + -4) + +6)]
print(test)
print(foo)"
`;

exports[`parse default scripts negation.src uglify 1`] = `
"globals.H=globals
I=(((-1 + 2) + -2) + +3)
J=[-1,(-2 + 4),((-2 + -4) + +6)]
print(I)
print(J)"
`;

exports[`parse default scripts obj-init.src 1`] = `
"valueOfIdentifier=\\"foo\\"
myObject={\\"test\\":{\\"another\\":\\"123\\"},\\"value\\":\\"123\\",\\"idtf\\":valueOfIdentifier}
print([myObject.test.another,myObject.value,myObject.idtf])
myList=[{\\"another\\":\\"123\\"},\\"123\\",valueOfIdentifier]
print(myList)"
`;

exports[`parse default scripts obj-init.src beautify 1`] = `
"valueOfIdentifier = \\"foo\\"

myObject = {\\"test\\": {\\"another\\": \\"123\\"}, \\"value\\": \\"123\\", \\"idtf\\": valueOfIdentifier}

print([myObject.test.another, myObject.value, myObject.idtf])

myList = [{\\"another\\": \\"123\\"}, \\"123\\", valueOfIdentifier]

print(myList)"
`;

exports[`parse default scripts obj-init.src uglify 1`] = `
"globals.H=globals
H.P=\\"123\\"
I=\\"foo\\"
J={\\"test\\":{\\"another\\":P},\\"value\\":P,\\"idtf\\":I}
print([J.test.another,J.value,J.idtf])
O=[{\\"another\\":P},P,I]
print(O)"
`;

exports[`parse default scripts optimize.src 1`] = `
"test=function(abc)
print(abc)
end function
superlangername=function(abc)
print(abc)
end function
superlangername3=function(abc)
print(abc)
end function
superlangername4=function(abc)
print(abc)
end function
superlangername5=function(abc)
print(abc)
end function
test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")"
`;

exports[`parse default scripts optimize.src beautify 1`] = `
"test = function(abc)
	print(abc)
end function

superlangername = function(abc)
	print(abc)
end function

superlangername3 = function(abc)
	print(abc)
end function

superlangername4 = function(abc)
	print(abc)
end function

superlangername5 = function(abc)
	print(abc)
end function

test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")"
`;

exports[`parse default scripts optimize.src uglify 1`] = `
"globals.H=globals
H.O=\\"xxxxxxxxxx\\"
I=function(N)
print(N)
end function
J=function(N)
print(N)
end function
K=function(N)
print(N)
end function
L=function(N)
print(N)
end function
M=function(N)
print(N)
end function
I(O)
J(O)
L(O)
J(O)
M(O)
K(O)"
`;

exports[`parse default scripts password-generator.src 1`] = `
"PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=((PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper) + PasswordGenerator.NUMBER_CHARACTERS)
PasswordGenerator.constructor=function()
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function(i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i == null) then
i=(currentCharBuffer.len - 1)
end if
p=currentCharBuffer[i]
p=(p + 1)
currentCharBuffer[i]=p
if (p == maxBufferSize) then
currentCharBuffer[i]=0
if (i == 0) then
currentCharBuffer.push(0)
else
me.increaseBuffer((i - 1))
end if
end if
end function
PasswordGenerator.gen=function()
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while (index < currentCharBuffer.len)
pointer=currentCharBuffer[index]
password=(password + generatorCharacters[pointer])
if (index == (currentCharBuffer.len - 1)) then
self.increaseBuffer()
end if
index=(index + 1)
end while
if (currentCharBuffer.len > me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor()
index=0
max=10
result=[]
while (index < max)
result.push(pgen.gen())
index=(index + 1)
end while
print(result)"
`;

exports[`parse default scripts password-generator.src beautify 1`] = `
"PasswordGenerator = {}
PasswordGenerator.MAX_PASSWORD_LENGTH = 15
PasswordGenerator.ALPHABETIC_CHARACTERS = \\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS = \\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC = ((PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper) + PasswordGenerator.NUMBER_CHARACTERS)

PasswordGenerator.constructor = function()
	me = self
	me.buffer = [0]
	me.characters = me.ALPHA_NUMERIC
	return me
end function

PasswordGenerator.increaseBuffer = function(i)
	me = self
	currentCharBuffer = me.buffer
	maxBufferSize = me.characters.len
	
	if (i == null) then
		i = (currentCharBuffer.len - 1)
	end if
	p = currentCharBuffer[i]
	p = (p + 1)
	currentCharBuffer[i] = p

	if (p == maxBufferSize) then
		currentCharBuffer[i] = 0

		if (i == 0) then
			currentCharBuffer.push(0)
		else
			me.increaseBuffer((i - 1))
		end if
	end if

end function

PasswordGenerator.gen = function()
	me = self
	currentCharBuffer = me.buffer
	generatorCharacters = me.characters
	password = \\"\\"
	index = 0

	while (index < currentCharBuffer.len)
		pointer = currentCharBuffer[index]
		password = (password + generatorCharacters[pointer])
		
		if (index == (currentCharBuffer.len - 1)) then
			self.increaseBuffer()
		end if
		index = (index + 1)
	end while

	if (currentCharBuffer.len > me.MAX_PASSWORD_LENGTH) then
		return null
	end if

	return password
end function

pgen = (new PasswordGenerator).constructor()
index = 0
max = 10
result = []

while (index < max)
	result.push(pgen.gen())
	index = (index + 1)
end while

print(result)"
`;

exports[`parse default scripts password-generator.src uglify 1`] = `
"globals.H=globals
I={}
I.MAX_PASSWORD_LENGTH=15
I.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
I.NUMBER_CHARACTERS=\\"0123456789\\"
I.ALPHA_NUMERIC=((I.ALPHABETIC_CHARACTERS + I.ALPHABETIC_CHARACTERS.upper) + I.NUMBER_CHARACTERS)
I.constructor=function()
U=self
U.buffer=[0]
U.characters=U.ALPHA_NUMERIC
return U
end function
I.increaseBuffer=function(X)
U=self
Y=U.buffer
Z=U.characters.len
if (X == null) then
X=(Y.len - 1)
end if
a=Y[X]
a=(a + 1)
Y[X]=a
if (a == Z) then
Y[X]=0
if (X == 0) then
Y.push(0)
else
U.increaseBuffer((X - 1))
end if
end if
end function
I.gen=function()
U=self
Y=U.buffer
b=U.characters
c=\\"\\"
R=0
while (R < Y.len)
d=Y[R]
c=(c + b[d])
if (R == (Y.len - 1)) then
self.increaseBuffer
end if
R=(R + 1)
end while
if (Y.len > U.MAX_PASSWORD_LENGTH) then
return null
end if
return c
end function
Q=(new I).constructor
R=0
S=10
T=[]
while (R < S)
T.push(Q.gen)
R=(R + 1)
end while
print(T)"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"String={}
String.constructor=function(str)
self.str=str
return self
end function
String.parse=function(values)
result=self.str
index=0
maxIndex=values.len
while (index < maxIndex)
result=result.replace((\\"$\\" + index),values[index])
index=(index + 1)
end while
return (new self).constructor(result)
end function
String.startsWith=function(str)
return (self.str.indexOf(str) == 0)
end function
String.substr=function(startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function(str)
return self.str.indexOf(str)
end function
String.replace=function(str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function()
return self.str
end function
String.length=function()
return self.str.len
end function
String.split=function(seperator)
return self.str.split(seperator)
end function
String.trim=function(seperator)
return (new self).constructor(self.str.trim())
end function
Error={}
Error.String=String
Error.constructor=function(message,values)
m=self
m.message=message
if (values != null) then
m.message=(new m.String).constructor(message).parse(values).toString()
end if
return m
end function
Error.throw=function()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret=\\"test123\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function(defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn == null) then
me.hashFn=@md5
end if
if (charset == null) then
me.table=me.defaultCharset
end if
if (me.table.len != 64) then
(new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw()
end if
return me
end function
Crypto.getHash=function(pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function(str,pw)
me=self
if (pw == null) then
pw=me.defaultSecret
end if
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=(str.len % 3)
max=(str.len - padding)
get=function(v)
if not me.table.hasIndex(v) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw()
end if
return me.table[v]
end function
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function(a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),16)
b=LSHIFT((str[(position + 1)].code + m),8)
c=(str[(position + 2)].code + m)
buffer=((a + b) + c)
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=(position + 3)
end while
if (padding == 2) then
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),8)
b=(str[(position + 1)].code + m)
buffer=(a + b)
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding == 1) then
m=hash[((position % hash.len) - 1)]
buffer=(str[position].code + m)
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function(str,pw)
me=self
if (pw == null) then
pw=me.defaultSecret
end if
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=(bitCounter + 1)
if (currentBit % 4) then
bitStorage=((bitStorage * 64) + buffer)
else
bitStorage=buffer
end if
if (currentBit % 4) then
expectedHashIndex=(((floor((hashPointer / 3)) * 3) % hashLength) - 1)
if not hash.hasIndex(expectedHashIndex) then
break
end if
m=hash[expectedHashIndex]
operation=AND((-2 * bitCounter),6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation != 0) then
charCode=(operation - m)
if (charCode > me.maxCharCode) then
break
end if
output.push(char(charCode))
end if
hashPointer=(hashPointer + 1)
end if
position=(position + 1)
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
pwd=\\"abcde\\"
foo=test.encrypt(pwd)
decrypted=test.decrypt(foo)
print(foo)
print(decrypted)"
`;

exports[`parse default scripts pseudo-crypto.src beautify 1`] = `
"String = {}

String.constructor = function(str)
	self.str = str
	return self
end function

String.parse = function(values)
	result = self.str
	index = 0
	maxIndex = values.len

	while (index < maxIndex)
		result = result.replace((\\"$\\" + index), values[index])
		index = (index + 1)
	end while

	return (new self).constructor(result)
end function

String.startsWith = function(str)
	return (self.str.indexOf(str) == 0)
end function

String.substr = function(startIndex, endIndex)
	return (new self).constructor(slice(self.str, startIndex, endIndex))
end function

String.indexOf = function(str)
	return self.str.indexOf(str)
end function

String.replace = function(str, newStr)
	return (new self).constructor(self.str.replace(str, newStr))
end function

String.remove = function(str)
	return (new self).constructor(self.str.remove(str))
end function

String.toString = function()
	return self.str
end function

String.length = function()
	return self.str.len
end function

String.split = function(seperator)
	return self.str.split(seperator)
end function

String.trim = function(seperator)
	return (new self).constructor(self.str.trim())
end function

Error = {}
Error.String = String

Error.constructor = function(message, values)
	m = self
	m.message = message

	if (values != null) then
		m.message = (new m.String).constructor(message).parse(values).toString()
	end if

	return m
end function

Error.throw = function()
	exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function

Crypto = {}
Crypto.defaultCharset = \\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret = \\"test123\\"
Crypto.maxCharCode = 55295
Crypto.Error = Error

Crypto.constructor = function(defaultSecret, hashFn, charset)
	me = self
	me.defaultSecret = defaultSecret
	me.table = charset
	me.hashFn = @hashFn
	
	if (@hashFn == null) then
		me.hashFn = @md5
	end if
	
	if (charset == null) then
		me.table = me.defaultCharset
	end if
	
	if (me.table.len != 64) then
		(new me.Error).constructor(\\"Invalid charset $0...\\", [me.table]).throw()
	end if
	return me
end function

Crypto.getHash = function(pw)
	me = self
	hash = []
	x = me.hashFn(pw)

	for char in x
		hash.push(char.code)
	end for

	hash.reverse
	return hash
end function

Crypto.encrypt = function(str, pw)
	me = self
	
	if (pw == null) then
		pw = me.defaultSecret
	end if
	hash = me.getHash(pw)
	hashPointer = 0
	output = []
	position = 0
	padding = (str.len % 3)
	max = (str.len - padding)

	get = function(v)
		if not me.table.hasIndex(v) then
			(new me.Error).constructor(\\"Invalid index $0...\\", [v]).throw()
		end if
		return me.table[v]
	end function

	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function

	LSHIFT = function(a, b)
		return bitwise(\\"<<\\", a, b)
	end function

	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function

	while (position < max)
		m = hash[((position % hash.len) - 1)]
		a = LSHIFT((str[position].code + m), 16)
		b = LSHIFT((str[(position + 1)].code + m), 8)
		c = (str[(position + 2)].code + m)
		buffer = ((a + b) + c)
		output.push(get(AND(RSHIFT(buffer, 18), 63)))
		output.push(get(AND(RSHIFT(buffer, 12), 63)))
		output.push(get(AND(RSHIFT(buffer, 6), 63)))
		output.push(get(AND(buffer, 63)))
		position = (position + 3)
	end while

	if (padding == 2) then
		m = hash[((position % hash.len) - 1)]
		a = LSHIFT((str[position].code + m), 8)
		b = (str[(position + 1)].code + m)
		buffer = (a + b)
		output.push(get(RSHIFT(buffer, 10)))
		output.push(get(AND(RSHIFT(buffer, 4), 63)))
		output.push(get(AND(LSHIFT(buffer, 2), 63)))
		output.push(\\"=\\")
	else if (padding == 1) then
		m = hash[((position % hash.len) - 1)]
		buffer = (str[position].code + m)
		output.push(get(RSHIFT(buffer, 2)))
		output.push(get(AND(LSHIFT(buffer, 4), 63)))
		output.push(\\"==\\")
	end if

	return output.join(\\"\\")
end function

Crypto.decrypt = function(str, pw)
	me = self
	
	if (pw == null) then
		pw = me.defaultSecret
	end if
	hash = me.getHash(pw)
	hashPointer = 0
	hashLength = hash.len
	output = []
	bitCounter = 0
	bitStorage = 0
	position = 0
	hashPointer = 0
	max = str.len

	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function

	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function

	while (position < max)
		buffer = me.table.indexOf(str[position])
		currentBit = bitCounter
		bitCounter = (bitCounter + 1)

		if (currentBit % 4) then
			bitStorage = ((bitStorage * 64) + buffer)
		else
			bitStorage = buffer
		end if

		if (currentBit % 4) then
			expectedHashIndex = (((floor((hashPointer / 3)) * 3) % hashLength) - 1)
			
			if not hash.hasIndex(expectedHashIndex) then
				break
			end if
			m = hash[expectedHashIndex]
			operation = AND((-2 * bitCounter), 6)
			operation = RSHIFT(bitStorage, operation)
			operation = AND(255, operation)

			if (operation != 0) then
				charCode = (operation - m)
				
				if (charCode > me.maxCharCode) then
					break
				end if
				output.push(char(charCode))
			end if

			hashPointer = (hashPointer + 1)
		end if

		position = (position + 1)
	end while

	return output.join(\\"\\")
end function

test = (new Crypto).constructor(\\"test\\")
pwd = \\"abcde\\"
foo = test.encrypt(pwd)
decrypted = test.decrypt(foo)
print(foo)
print(decrypted)"
`;

exports[`parse default scripts pseudo-crypto.src uglify 1`] = `
"globals.H=globals
H.Ͽ=1
H.Ͻ=null
H.Ͼ=63
I={}
I.constructor=function(str)
self.str=str
return self
end function
I.parse=function(values)
f=self.str
g=0
h=values.len
while (g < h)
f=f.replace((\\"$\\" + g),values[g])
g=(g + Ͽ)
end while
return (new self).constructor(f)
end function
I.startsWith=function(str)
return (self.str.indexOf(str) == 0)
end function
I.substr=function(i,j)
return (new self).constructor(slice(self.str,i,j))
end function
I.indexOf=function(str)
return self.str.indexOf(str)
end function
I.replace=function(str,k)
return (new self).constructor(self.str.replace(str,k))
end function
I.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
I.toString=function()
return self.str
end function
I.length=function()
return self.str.len
end function
I.split=function(l)
return self.str.split(l)
end function
I.trim=function(l)
return (new self).constructor(self.str.trim)
end function
S={}
S.String=I
S.constructor=function(o,values)
n=self
n.message=o
if (values != Ͻ) then
n.message=(new n.String).constructor(o).parse(values).toString
end if
return n
end function
S.throw=function()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
U={}
U.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
U.defaultSecret=\\"test123\\"
U.maxCharCode=55295
U.Error=S
U.constructor=function(W,p,q)
r=self
r.defaultSecret=W
r.table=q
r.hashFn=@p
if (@p == Ͻ) then
r.hashFn=@md5
end if
if (q == Ͻ) then
r.table=r.defaultCharset
end if
if (r.table.len != 64) then
(new r.Error).constructor(\\"Invalid charset $0...\\",[r.table]).throw
end if
return r
end function
U.getHash=function(t)
r=self
hash=[]
u=r.hashFn(t)
for char in u
hash.push(char.code)
end for
hash.reverse
return hash
end function
U.encrypt=function(str,t)
r=self
if (t == Ͻ) then
t=r.defaultSecret
end if
hash=r.getHash(t)
w=0
x=[]
y=0
z=(str.len % 3)
_=(str.len - z)
Ϩ=function(ϴ)
if not r.table.hasIndex(ϴ) then
(new r.Error).constructor(\\"Invalid index $0...\\",[ϴ]).throw
end if
return r.table[ϴ]
end function
ϩ=function(Ϭ,Ϯ)
return bitwise(\\"&\\",Ϭ,Ϯ)
end function
Ϫ=function(Ϭ,Ϯ)
return bitwise(\\"<<\\",Ϭ,Ϯ)
end function
ϫ=function(Ϭ,Ϯ)
return bitwise(\\">>\\",Ϭ,Ϯ)
end function
while (y < _)
n=hash[((y % hash.len) - Ͽ)]
Ϭ=Ϫ((str[y].code + n),16)
Ϯ=Ϫ((str[(y + Ͽ)].code + n),8)
ϰ=(str[(y + 2)].code + n)
ϲ=((Ϭ + Ϯ) + ϰ)
x.push(Ϩ(ϩ(ϫ(ϲ,18),Ͼ)))
x.push(Ϩ(ϩ(ϫ(ϲ,12),Ͼ)))
x.push(Ϩ(ϩ(ϫ(ϲ,6),Ͼ)))
x.push(Ϩ(ϩ(ϲ,Ͼ)))
y=(y + 3)
end while
if (z == 2) then
n=hash[((y % hash.len) - Ͽ)]
Ϭ=Ϫ((str[y].code + n),8)
Ϯ=(str[(y + Ͽ)].code + n)
ϲ=(Ϭ + Ϯ)
x.push(Ϩ(ϫ(ϲ,10)))
x.push(Ϩ(ϩ(ϫ(ϲ,4),Ͼ)))
x.push(Ϩ(ϩ(Ϫ(ϲ,2),Ͼ)))
x.push(\\"=\\")
else if (z == Ͽ) then
n=hash[((y % hash.len) - Ͽ)]
ϲ=(str[y].code + n)
x.push(Ϩ(ϫ(ϲ,2)))
x.push(Ϩ(ϩ(Ϫ(ϲ,4),Ͼ)))
x.push(\\"==\\")
end if
return x.join(\\"\\")
end function
U.decrypt=function(str,t)
r=self
if (t == Ͻ) then
t=r.defaultSecret
end if
hash=r.getHash(t)
w=0
϶=hash.len
x=[]
Ϸ=0
ϸ=0
y=0
w=0
_=str.len
ϩ=function(Ϭ,Ϯ)
return bitwise(\\"&\\",Ϭ,Ϯ)
end function
ϫ=function(Ϭ,Ϯ)
return bitwise(\\">>\\",Ϭ,Ϯ)
end function
while (y < _)
ϲ=r.table.indexOf(str[y])
Ϲ=Ϸ
Ϸ=(Ϸ + Ͽ)
if (Ϲ % 4) then
ϸ=((ϸ * 64) + ϲ)
else
ϸ=ϲ
end if
if (Ϲ % 4) then
Ϻ=(((floor((w / 3)) * 3) % ϶) - Ͽ)
if not hash.hasIndex(Ϻ) then
break
end if
n=hash[Ϻ]
ϻ=ϩ((-2 * Ϸ),6)
ϻ=ϫ(ϸ,ϻ)
ϻ=ϩ(255,ϻ)
if (ϻ != 0) then
ϼ=(ϻ - n)
if (ϼ > r.maxCharCode) then
break
end if
x.push(char(ϼ))
end if
w=(w + Ͽ)
end if
y=(y + Ͽ)
end while
return x.join(\\"\\")
end function
ϯ=(new U).constructor(\\"test\\")
ϱ=\\"abcde\\"
d=ϯ.encrypt(ϱ)
e=ϯ.decrypt(d)
print(d)
print(e)"
`;

exports[`parse default scripts random.src 1`] = `
"Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function(seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function(seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=((seedVal + char.code) + pos)
pos=(pos - 1)
end for
return seedVal
end function
Random.gen=function(min,max,seed,inc)
me=self
pool=me.pool
if (inc == null) then
inc=true
end if
if (seed == null) then
seed=me.defaultSeed
end if
if pool.hasIndex(seed) then
ps=pool[seed]
if not inc then
return ps.value
end if
ps.generation=(ps.generation + 1)
val=floor(((rnd((ps.value + ps.generation)) * (max - min)) + min))
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor(((rnd(seedVal) * (max - min)) + min))
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function(min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while (index < amount)
temp=me.gen(min,max,seed)
result.push(temp)
index=(index + 1)
end while
if (keepPool != true) then
me.pool.remove(seed)
end if
return result
end function
Random.get=function(min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))"
`;

exports[`parse default scripts random.src beautify 1`] = `
"Random = {}
Random.pool = {}
Random.defaultSeed = \\"random\\"

Random.createPool = function(seed, val)
	return {\\"seed\\": seed, \\"value\\": val, \\"generation\\": 0}
end function

Random.calcSeed = function(seed)
	seedVal = 0
	pos = seed.len

	for char in seed
		seedVal = ((seedVal + char.code) + pos)
		pos = (pos - 1)
	end for

	return seedVal
end function

Random.gen = function(min, max, seed, inc)
	me = self
	pool = me.pool
	
	if (inc == null) then
		inc = true
	end if
	
	if (seed == null) then
		seed = me.defaultSeed
	end if

	if pool.hasIndex(seed) then
		ps = pool[seed]
		
		if not inc then
			return ps.value
		end if
		ps.generation = (ps.generation + 1)
		val = floor(((rnd((ps.value + ps.generation)) * (max - min)) + min))
		ps.value = val
		return val
	end if

	seedVal = me.calcSeed(seed)
	val = floor(((rnd(seedVal) * (max - min)) + min))
	pool[seed] = me.createPool(seedVal, val)
	return val
end function

Random.seq = function(min, max, seed, amount, keepPool)
	me = self
	index = 0
	result = []

	while (index < amount)
		temp = me.gen(min, max, seed)
		result.push(temp)
		index = (index + 1)
	end while

	
	if (keepPool != true) then
		me.pool.remove(seed)
	end if
	return result
end function

Random.get = function(min, max)
	return self.gen(min, max)
end function

print(Random.get(100, 500))
print(Random.seq(100, 500, \\"test\\", 10))"
`;

exports[`parse default scripts random.src uglify 1`] = `
"globals.H=globals
I={}
I.pool={}
I.defaultSeed=\\"random\\"
I.createPool=function(Q,val)
return {\\"seed\\":Q,\\"value\\":val,\\"generation\\":0}
end function
I.calcSeed=function(Q)
R=0
S=Q.len
for char in Q
R=((R + char.code) + S)
S=(S - 1)
end for
return R
end function
I.gen=function(T,U,Q,V)
W=self
J=W.pool
if (V == null) then
V=true
end if
if (Q == null) then
Q=W.defaultSeed
end if
if J.hasIndex(Q) then
X=J[Q]
if not V then
return X.value
end if
X.generation=(X.generation + 1)
val=floor(((rnd((X.value + X.generation)) * (U - T)) + T))
X.value=val
return val
end if
R=W.calcSeed(Q)
val=floor(((rnd(R) * (U - T)) + T))
J[Q]=W.createPool(R,val)
return val
end function
I.seq=function(T,U,Q,a,b)
W=self
c=0
d=[]
while (c < a)
e=W.gen(T,U,Q)
d.push(e)
c=(c + 1)
end while
if (b != true) then
W.pool.remove(Q)
end if
return d
end function
I.get=function(T,U)
return self.gen(T,U)
end function
print(I.get(100,500))
print(I.seq(100,500,\\"test\\",10))"
`;

exports[`parse default scripts simple-object.src 1`] = `
"test={}
test.here=\\"was\\"
test.was=function()
print(self.here)
end function
print(test.was())"
`;

exports[`parse default scripts simple-object.src beautify 1`] = `
"test = {}
test.here = \\"was\\"

test.was = function()
	print(self.here)
end function

print(test.was())"
`;

exports[`parse default scripts simple-object.src uglify 1`] = `
"globals.H=globals
I={}
I.here=\\"was\\"
I.was=function()
print(self.here)
end function
print(I.was)"
`;

exports[`parse default scripts slice.src 1`] = `
"divideString=function(str,limit)
offset=0
maxLen=str.len
frags=[]
while (offset < maxLen)
next=(offset + limit)
frags.push(str[offset:next])
offset=next
end while
return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\",5))"
`;

exports[`parse default scripts slice.src beautify 1`] = `
"divideString = function(str, limit)
	offset = 0
	maxLen = str.len
	frags = []

	while (offset < maxLen)
		next = (offset + limit)
		frags.push(str[offset : next])
		offset = next
	end while

	return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\", 5))"
`;

exports[`parse default scripts slice.src uglify 1`] = `
"globals.H=globals
I=function(str,J)
K=0
L=str.len
M=[]
while (K < L)
N=(K + J)
M.push(str[K:N])
K=N
end while
return M
end function
print(I(\\"blahhblahhblahhblahhblahhblahhgad\\",5))"
`;

exports[`parse default scripts unary.src 1`] = `
"test=function()
return null
end function
print((@\\"was\\".split and (false or not false)))
print(@(\\"was\\".split and (false or not false)))
print((not \\"was\\".split and (false or not false)))
print(not (\\"was\\".split and (false or not false)))
print((-1 + 2))
print(-(1 + 2))"
`;

exports[`parse default scripts unary.src beautify 1`] = `
"test = function()
	return null
end function

print((@\\"was\\".split and (false or not false)))
print(@(\\"was\\".split and (false or not false)))
print((not \\"was\\".split and (false or not false)))
print(not (\\"was\\".split and (false or not false)))
print((-1 + 2))
print(-(1 + 2))"
`;

exports[`parse default scripts unary.src uglify 1`] = `
"globals.H=globals
H.L=\\"was\\"
H.K=false
I=function()
return null
end function
print((@L.split and (K or not K)))
print(@(L.split and (K or not K)))
print((not L.split and (K or not K)))
print(not (L.split and (K or not K)))
print((-1 + 2))
print(-(1 + 2))"
`;
